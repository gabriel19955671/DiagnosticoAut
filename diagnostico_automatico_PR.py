import streamlit as st
import pandas as pd
from datetime import datetime, date
import os
import time
from fpdf import FPDF 
import tempfile
import re
import json
import plotly.express as px
import plotly.graph_objects as go 
import uuid

st.set_page_config(page_title="Portal de Diagn√≥stico", layout="wide", initial_sidebar_state="expanded")

# !!!!! PASSO DE DEPURA√á√ÉO CRUCIAL !!!!!
# !!!!! O BLOCO DE CSS ABAIXO EST√Å INTENCIONALMENTE COMENTADO. !!!!!
# !!!!! POR FAVOR, EXECUTE O C√ìDIGO DESTA FORMA PRIMEIRO. !!!!!
# !!!!! SE O CONTE√öDO DO ADMIN APARECER, O PROBLEMA √â O SEU CSS. !!!!!
"""
st.markdown(f\""" 
<style>
{''' 
.login-container { max-width: 400px; margin: 60px auto 0 auto; padding: 40px; border-radius: 8px; background-color: #ffffff; box-shadow: 0 4px 12px rgba(0,0,0,0.15); font-family: 'Segoe UI', sans-serif; }
.login-container h2 { text-align: center; margin-bottom: 30px; font-weight: 600; font-size: 26px; color: #2563eb; }
.stButton>button { border-radius: 6px; background-color: #2563eb; color: white; font-weight: 500; padding: 0.5rem 1.2rem; margin-top: 0.5rem; }
.stDownloadButton>button { background-color: #10b981; color: white; font-weight: 600; border-radius: 6px; margin-top: 10px; padding: 0.5rem 1.2rem; }
.stTextInput>div>input, .stTextArea>div>textarea { border-radius: 6px; padding: 0.4rem; border: 1px solid #d1d5db; background-color: #f9fafb; }
.stTabs [data-baseweb="tab"] { font-size: 16px; font-weight: 600; padding: 10px 20px; }
.custom-card { border: 1px solid #e0e0e0; border-left: 5px solid #2563eb; padding: 15px; margin-bottom: 15px; border-radius: 5px; background-color: #f9f9f9; }
.custom-card h4 { margin-top: 0; color: #2563eb; }
.feedback-saved { font-size: 0.85em; color: green; font-style: italic; margin-top: -8px; margin-bottom: 8px; }
.analise-pergunta-cliente { font-size: 0.9em; color: #555; background-color: #f0f8ff; border-left: 3px solid #1e90ff; padding: 8px; margin-top: 5px; margin-bottom:10px; border-radius: 3px;}
.notification-dot { height: 8px; width: 8px; background-color: red; border-radius: 50%; display: inline-block; margin-left: 5px; }
.kpi-card { background-color: #f9f9f9; padding: 15px; border-radius: 8px; border: 1px solid #e0e0e0; text-align: center; margin-bottom: 10px; }
.kpi-card h4 { font-size: 1.1em; color: #333; margin-bottom: 5px; }
.kpi-card .value { font-size: 1.8em; font-weight: bold; color: #2563eb; }
'''}
</style>
\""", unsafe_allow_html=True)
"""

st.title("üîí Portal de Diagn√≥stico")

# --- Configura√ß√µes de Arquivos ---
admin_credenciais_csv = "admins.csv"
usuarios_csv = "usuarios.csv"
arquivo_csv = "diagnosticos_clientes.csv"
usuarios_bloqueados_csv = "usuarios_bloqueados.csv"
perguntas_csv = "perguntas_formulario.csv"
historico_csv = "historico_clientes.csv"
analises_perguntas_csv = "analises_perguntas.csv"
notificacoes_csv = "notificacoes.csv"
instrucoes_txt_file = "instrucoes_clientes.txt"
LOGOS_DIR = "client_logos"
ST_KEY_VERSION = "v27_css_disabled_test" 

# --- Inicializa√ß√£o do Session State ---
default_session_state = {
    "admin_logado": False, "cliente_logado": False, 
    "admin_user_login_identifier": None, "last_cnpj_input":""
    # Outras chaves de estado foram removidas para simplificar o teste de renderiza√ß√£o do admin
    # Adicione-as de volta conforme necess√°rio quando esta parte funcionar
} 
for key, value in default_session_state.items():
    if key not in st.session_state:
        st.session_state[key] = value

# --- Fun√ß√µes Utilit√°rias (Simples Placeholders para este teste) ---
def sanitize_column_name(name): return str(name).replace(" ","_") 
def pdf_safe_text_output(text): return str(text) 
def inicializar_csv(filepath, columns, defaults=None):
    if not os.path.exists(LOGOS_DIR):
        try: os.makedirs(LOGOS_DIR)
        except OSError as e: st.error(f"Erro ao criar diret√≥rio de logos '{LOGOS_DIR}': {e}")

    if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:
        df_init = pd.DataFrame(columns=columns)
        if defaults:
            for col, default_val in defaults.items():
                if col in columns: df_init[col] = default_val
        try:
            df_init.to_csv(filepath, index=False, encoding='utf-8')
            # st.sidebar.write(f"Arquivo {filepath} criado/verificado.") # DEBUG
        except Exception as e_csv:
            st.sidebar.error(f"Falha ao criar/salvar {filepath}: {e_csv}")


# --- Inicializa√ß√£o dos arquivos CSV ---
try:
    colunas_base_usuarios = ["CNPJ", "Senha", "Empresa", "NomeContato", "Telefone", "ConfirmouInstrucoesParaSlotAtual", "DiagnosticosDisponiveis", "TotalDiagnosticosRealizados", "LiberacoesExtrasConcedidas"]
    inicializar_csv(admin_credenciais_csv, ["Usuario", "Senha"])
    if not (os.path.exists(admin_credenciais_csv) and os.path.getsize(admin_credenciais_csv) > 0):
        pd.DataFrame([{"Usuario": "admin", "Senha": "admin"}]).to_csv(admin_credenciais_csv, index=False, encoding='utf-8')
    inicializar_csv(usuarios_csv, colunas_base_usuarios, defaults={"ConfirmouInstrucoesParaSlotAtual": "False", "DiagnosticosDisponiveis": 1, "TotalDiagnosticosRealizados": 0, "LiberacoesExtrasConcedidas": 0})
    # Adicione inicializa√ß√µes para outros CSVs se forem CR√çTICOS para a l√≥gica de login/menu
except Exception as e_init:
    st.error(f"Erro fatal na inicializa√ß√£o dos arquivos CSV principais: {e_init}")
    st.exception(e_init); st.stop()


# --- L√≥gica de Login e Navega√ß√£o Principal ---
if st.session_state.get("trigger_rerun_global"): 
    st.session_state.trigger_rerun_global = False; st.rerun()

st.sidebar.write(f"DEBUG (antes radio): admin_logado={st.session_state.get('admin_logado', False)}, cliente_logado={st.session_state.get('cliente_logado', False)}")

if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False):
    aba = st.radio("Voc√™ √©:", ["Administrador", "Cliente"], horizontal=True, key=f"tipo_usuario_radio_{ST_KEY_VERSION}") 
elif st.session_state.get("admin_logado", False): 
    aba = "Administrador"
else: 
    aba = "Cliente"
st.sidebar.write(f"DEBUG (ap√≥s radio): aba='{aba}'")

# --- √ÅREA DE LOGIN DO ADMINISTRADOR (RESTAURADA) ---
if aba == "Administrador" and not st.session_state.get("admin_logado", False):
    # Mantenha seu CSS do login-container comentado se ele estiver dentro do st.markdown principal
    st.markdown('<div>', unsafe_allow_html=True) # Use div simples sem classe para teste
    st.markdown(f'<h2>Login Administrador üîë</h2>', unsafe_allow_html=True) # H2 simples
    with st.form(f"form_admin_login_{ST_KEY_VERSION}"): 
        u = st.text_input("Usu√°rio", key=f"admin_u_{ST_KEY_VERSION}")
        p = st.text_input("Senha", type="password", key=f"admin_p_{ST_KEY_VERSION}") 
        if st.form_submit_button("Entrar"):
            try:
                if os.path.exists(admin_credenciais_csv) and os.path.getsize(admin_credenciais_csv) > 0:
                    df_creds = pd.read_csv(admin_credenciais_csv, encoding='utf-8')
                    admin_encontrado = df_creds[df_creds["Usuario"] == u]
                    if not admin_encontrado.empty and str(admin_encontrado.iloc[0]["Senha"]) == str(p):
                        st.session_state.admin_logado = True
                        st.session_state.admin_user_login_identifier = u 
                        st.success("Login de administrador bem-sucedido! ‚úÖ"); st.rerun()
                    else: st.error("Usu√°rio ou senha inv√°lidos.")
                else:
                     st.error(f"Arquivo de credenciais '{admin_credenciais_csv}' n√£o encontrado ou vazio.")
            except Exception as e: st.error(f"Erro no login admin: {e}")
    st.markdown('</div>', unsafe_allow_html=True); st.stop()

# --- √ÅREA DE LOGIN DO CLIENTE (SIMPLIFICADA PARA ESTE TESTE) ---
if aba == "Cliente" and not st.session_state.get("cliente_logado", False):
    st.markdown("<h2>Login Cliente üè¢</h2>", unsafe_allow_html=True)
    with st.form(f"form_cliente_login_{ST_KEY_VERSION}"):
        st.text_input("CNPJ (Teste)", key=f"cli_c_{ST_KEY_VERSION}")
        st.text_input("Senha (Teste)", type="password", key=f"cli_s_{ST_KEY_VERSION}")
        if st.form_submit_button("Entrar Cliente (Teste)"):
            st.info("Login de cliente (placeholder) clicado.")
    st.stop()

# --- √ÅREA DO CLIENTE LOGADO (SIMPLIFICADA PARA ESTE TESTE) ---
if aba == "Cliente" and st.session_state.get("cliente_logado", False):
    st.sidebar.markdown(f"### Bem-vindo(a), Cliente Placeholder! üëã") 
    if st.sidebar.button(f"Sair Cliente", key=f"logout_cliente_{ST_KEY_VERSION}"):
        st.session_state.cliente_logado = False; st.rerun()
    st.header(f"Painel Cliente Placeholder")
    st.markdown("Conte√∫do da √°rea do cliente placeholder...")


# --- √ÅREA DO ADMINISTRADOR LOGADO (EXTREMAMENTE SIMPLIFICADA PARA TESTAR RENDERIZA√á√ÉO) ---
if aba == "Administrador" and st.session_state.get("admin_logado", False):
    st.sidebar.write(f"[DEBUG ADMIN] PONTO S1 - Entrou no bloco admin_logado.") 
    try:
        st.sidebar.success("üü¢ Admin Logado")
        if st.sidebar.button(f"üö™ Sair do Painel Admin", key=f"logout_admin_{ST_KEY_VERSION}_adm"): 
            st.session_state.admin_logado = False
            if 'admin_user_login_identifier' in st.session_state:
                del st.session_state.admin_user_login_identifier
            st.rerun() 
        
        menu_admin_options = [
            "üìä Vis√£o Geral e Diagn√≥sticos", "üö¶ Status dos Clientes", "üìú Hist√≥rico de Usu√°rios",
            "üìù Gerenciar Perguntas", "üí° Gerenciar An√°lises de Perguntas",
            "‚úçÔ∏è Gerenciar Instru√ß√µes Clientes", "üë• Gerenciar Clientes", 
            "üëÆ Gerenciar Administradores", "üíæ Backup de Dados"
        ]
        menu_admin = st.sidebar.selectbox( # Adicionado key aqui
            "Funcionalidades Admin:", 
            menu_admin_options, 
            key=f"admin_menu_selectbox_{ST_KEY_VERSION}_adm" 
        )
        st.sidebar.info(f"[DEBUG Sidebar] Op√ß√£o Selecionada: '{menu_admin}'")
        
        # --- Conte√∫do Principal (Main Panel) ---
        st.write("[DEBUG Main Panel] PONTO MP0 - IMEDIATAMENTE ANTES DO HEADER") 

        admin_page_title_display = "Painel Admin (Default)"
        if isinstance(menu_admin, str) and menu_admin:
            try:
                admin_page_title_display = f"Painel Admin: {menu_admin.split(' ')[0]}"
            except IndexError: 
                admin_page_title_display = f"Painel Admin: {menu_admin}"
        
        st.header(admin_page_title_display) # Este √© o header principal da p√°gina admin
        st.write(f"[DEBUG Main Panel] PONTO MP1 - AP√ìS Header. T√≠tulo: '{admin_page_title_display}'")
        st.write(f"[DEBUG Main Panel] PONTO MP2 - Antes do dispatch. menu_admin = '{menu_admin}'")

        # L√≥gica de dispatch do menu admin (USANDO APENAS st.write para m√°xima simplicidade)
        if menu_admin == "üìä Vis√£o Geral e Diagn√≥sticos":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Vis√£o Geral e Diagn√≥sticos ---")
            
        elif menu_admin == "üö¶ Status dos Clientes":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Status dos Clientes ---")

        elif menu_admin == "üìú Hist√≥rico de Usu√°rios":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Hist√≥rico de Usu√°rios ---")

        elif menu_admin == "üìù Gerenciar Perguntas":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Gerenciar Perguntas ---")

        elif menu_admin == "üí° Gerenciar An√°lises de Perguntas":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Gerenciar An√°lises de Perguntas ---")
            
        elif menu_admin == "‚úçÔ∏è Gerenciar Instru√ß√µes Clientes":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Gerenciar Instru√ß√µes Clientes ---")

        elif menu_admin == "üë• Gerenciar Clientes":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Gerenciar Clientes ---")

        elif menu_admin == "üëÆ Gerenciar Administradores":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Gerenciar Administradores ---")

        elif menu_admin == "üíæ Backup de Dados":
            st.write("--- CONTE√öDO VIS√çVEL DE TESTE: Backup de Dados ---")
        
        else:
            st.warning(f"[DEBUG Main Panel] Op√ß√£o de menu '{menu_admin}' n√£o corresponde a nenhum bloco if/elif.")
        
        st.write(f"[DEBUG Main Panel] PONTO MP3 - Ap√≥s dispatch do menu")

    except Exception as e_outer_admin_critical:
        st.error(f"Um erro cr√≠tico ocorreu na √°rea administrativa: {e_outer_admin_critical}")
        st.exception(e_outer_admin_critical)
        st.write(f"[DEBUG Main Panel] PONTO MP_EXCEPT - Dentro do except e_outer_admin_critical ({e_outer_admin_critical})") 

if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False) and ('aba' not in locals() or aba is None):
    st.info("Fallback final: Selecione se voc√™ √© Administrador ou Cliente para continuar.")