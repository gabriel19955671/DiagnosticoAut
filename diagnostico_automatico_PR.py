import streamlit as st
import pandas as pd
from datetime import datetime, date
import os
import time
from fpdf import FPDF 
import tempfile
import re
import json
import plotly.express as px
import plotly.graph_objects as go 
import uuid

st.set_page_config(page_title="Portal de Diagn√≥stico", layout="wide", initial_sidebar_state="expanded")

# !!!!! PASSO DE DEPURA√á√ÉO CRUCIAL !!!!!
# !!!!! COMENTE O BLOCO DE CSS ABAIXO PARA TESTAR SE ELE EST√Å CAUSANDO A INVISIBILIDADE !!!!!
# !!!!! Se o conte√∫do aparecer ap√≥s comentar, o problema √© 100% seu CSS. !!!!!
"""
st.markdown(f\""" 
<style>
{''' 
.login-container { max-width: 400px; margin: 60px auto 0 auto; padding: 40px; border-radius: 8px; background-color: #ffffff; box-shadow: 0 4px 12px rgba(0,0,0,0.15); font-family: 'Segoe UI', sans-serif; }
.login-container h2 { text-align: center; margin-bottom: 30px; font-weight: 600; font-size: 26px; color: #2563eb; }
.stButton>button { border-radius: 6px; background-color: #2563eb; color: white; font-weight: 500; padding: 0.5rem 1.2rem; margin-top: 0.5rem; }
.stDownloadButton>button { background-color: #10b981; color: white; font-weight: 600; border-radius: 6px; margin-top: 10px; padding: 0.5rem 1.2rem; }
.stTextInput>div>input, .stTextArea>div>textarea { border-radius: 6px; padding: 0.4rem; border: 1px solid #d1d5db; background-color: #f9fafb; }
.stTabs [data-baseweb="tab"] { font-size: 16px; font-weight: 600; padding: 10px 20px; }
.custom-card { border: 1px solid #e0e0e0; border-left: 5px solid #2563eb; padding: 15px; margin-bottom: 15px; border-radius: 5px; background-color: #f9f9f9; }
.custom-card h4 { margin-top: 0; color: #2563eb; }
.feedback-saved { font-size: 0.85em; color: green; font-style: italic; margin-top: -8px; margin-bottom: 8px; }
.analise-pergunta-cliente { font-size: 0.9em; color: #555; background-color: #f0f8ff; border-left: 3px solid #1e90ff; padding: 8px; margin-top: 5px; margin-bottom:10px; border-radius: 3px;}
.notification-dot { height: 8px; width: 8px; background-color: red; border-radius: 50%; display: inline-block; margin-left: 5px; }
.kpi-card { background-color: #f9f9f9; padding: 15px; border-radius: 8px; border: 1px solid #e0e0e0; text-align: center; margin-bottom: 10px; }
.kpi-card h4 { font-size: 1.1em; color: #333; margin-bottom: 5px; }
.kpi-card .value { font-size: 1.8em; font-weight: bold; color: #2563eb; }
'''}
</style>
\""", unsafe_allow_html=True)
"""

st.title("üîí Portal de Diagn√≥stico")

# --- Configura√ß√µes de Arquivos ---
admin_credenciais_csv = "admins.csv"
usuarios_csv = "usuarios.csv"
arquivo_csv = "diagnosticos_clientes.csv"
# ... (resto das suas defini√ß√µes de arquivos)
ST_KEY_VERSION = "v26_css_focus" 

# --- Inicializa√ß√£o do Session State e Fun√ß√µes Utilit√°rias ---
# --- COLOQUE O C√ìDIGO COMPLETO DESSAS SE√á√ïES AQUI (omitido por brevidade) ---
# --- Certifique-se que inicializar_csv, registrar_acao, e as fun√ß√µes PDF est√£o corretas ---
# Exemplo (mantenha suas vers√µes completas):
default_session_state = { "admin_logado": False, "cliente_logado": False, "admin_user_login_identifier": None, "last_cnpj_input":""} # Simplificado
for key, value in default_session_state.items():
    if key not in st.session_state: st.session_state[key] = value
def inicializar_csv(filepath, columns, defaults=None): pass
def registrar_acao(cnpj, acao, desc): pass
def gerar_pdf_historico(df, titulo): st.info(f"Geraria PDF para: {titulo}"); return "dummy_path.pdf" # Placeholder
# --- FIM DAS FUN√á√ïES UTILIT√ÅRIAS ---

# --- L√≥gica de Login e Navega√ß√£o Principal (Restaurada) ---
if st.session_state.get("trigger_rerun_global"): 
    st.session_state.trigger_rerun_global = False; st.rerun()

st.sidebar.write(f"DEBUG (antes radio): admin_logado={st.session_state.get('admin_logado', False)}, cliente_logado={st.session_state.get('cliente_logado', False)}")

if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False):
    aba = st.radio("Voc√™ √©:", ["Administrador", "Cliente"], horizontal=True, key=f"tipo_usuario_radio_{ST_KEY_VERSION}") 
elif st.session_state.get("admin_logado", False): 
    aba = "Administrador"
else: 
    aba = "Cliente"
st.sidebar.write(f"DEBUG (ap√≥s radio): aba='{aba}'")

# --- √ÅREA DE LOGIN DO ADMINISTRADOR (RESTAURADA) ---
if aba == "Administrador" and not st.session_state.get("admin_logado", False):
    st.markdown('<div class="login-container">', unsafe_allow_html=True)
    st.markdown(f'<h2 class="login-title">Login Administrador üîë</h2>', unsafe_allow_html=True)
    with st.form(f"form_admin_login_{ST_KEY_VERSION}"): 
        u = st.text_input("Usu√°rio", key=f"admin_u_{ST_KEY_VERSION}")
        p = st.text_input("Senha", type="password", key=f"admin_p_{ST_KEY_VERSION}") 
        if st.form_submit_button("Entrar"):
            try:
                if os.path.exists(admin_credenciais_csv) and os.path.getsize(admin_credenciais_csv) > 0:
                    df_creds = pd.read_csv(admin_credenciais_csv, encoding='utf-8')
                    admin_encontrado = df_creds[df_creds["Usuario"] == u]
                    if not admin_encontrado.empty and str(admin_encontrado.iloc[0]["Senha"]) == str(p):
                        st.session_state.admin_logado = True
                        st.session_state.admin_user_login_identifier = u 
                        st.success("Login de administrador bem-sucedido! ‚úÖ"); st.rerun()
                    else: st.error("Usu√°rio ou senha inv√°lidos.")
                else:
                     st.error(f"Arquivo de credenciais '{admin_credenciais_csv}' n√£o encontrado ou vazio.")
            except Exception as e: st.error(f"Erro no login admin: {e}")
    st.markdown('</div>', unsafe_allow_html=True); st.stop()

# --- √ÅREA DE LOGIN DO CLIENTE (RESTAURADA - coloque seu c√≥digo completo) ---
if aba == "Cliente" and not st.session_state.get("cliente_logado", False):
    st.markdown('<div class="login-container">', unsafe_allow_html=True)
    st.markdown(f'<h2 class="login-title">Login Cliente üè¢</h2>', unsafe_allow_html=True)
    # --- COLOQUE SEU FORMUL√ÅRIO DE LOGIN DO CLIENTE E L√ìGICA AQUI ---
    st.markdown("Formul√°rio de login do cliente aqui...") # Placeholder
    st.markdown('</div>', unsafe_allow_html=True); st.stop()

# --- √ÅREA DO CLIENTE LOGADO (RESTAURADA - coloque seu c√≥digo completo) ---
if aba == "Cliente" and st.session_state.get("cliente_logado", False):
    # --- COLOQUE O C√ìDIGO COMPLETO DA √ÅREA DO CLIENTE AQUI ---
    st.header(f"Painel Cliente Placeholder")
    st.markdown("Conte√∫do da √°rea do cliente...")
    if st.sidebar.button(f"Logout Cliente {ST_KEY_VERSION}"): # Exemplo
        st.session_state.cliente_logado = False; st.rerun()


# --- √ÅREA DO ADMINISTRADOR LOGADO (COM HIST√ìRICO RESTAURADO E OUTROS PLACEHOLDERS) ---
if aba == "Administrador" and st.session_state.get("admin_logado", False):
    st.sidebar.write(f"[DEBUG ADMIN] PONTO S1 - Entrou no bloco admin_logado.") 
    try:
        st.sidebar.success("üü¢ Admin Logado")
        if st.sidebar.button(f"üö™ Sair do Painel Admin", key=f"logout_admin_{ST_KEY_VERSION}_adm"): 
            st.session_state.admin_logado = False
            if 'admin_user_login_identifier' in st.session_state:
                del st.session_state.admin_user_login_identifier
            st.rerun() 
        
        menu_admin_options = [
            "üìä Vis√£o Geral e Diagn√≥sticos", "üö¶ Status dos Clientes", "üìú Hist√≥rico de Usu√°rios",
            "üìù Gerenciar Perguntas", "üí° Gerenciar An√°lises de Perguntas",
            "‚úçÔ∏è Gerenciar Instru√ß√µes Clientes", "üë• Gerenciar Clientes", 
            "üëÆ Gerenciar Administradores", "üíæ Backup de Dados"
        ]
        menu_admin = st.sidebar.selectbox(
            "Funcionalidades Admin:", 
            menu_admin_options, 
            key=f"admin_menu_selectbox_{ST_KEY_VERSION}_adm" 
        )
        st.sidebar.info(f"[DEBUG Sidebar] Op√ß√£o: '{menu_admin}'")
        
        admin_page_title_prefix = menu_admin.split(' ')[0] if isinstance(menu_admin, str) and menu_admin else "Admin"
        st.header(f"Painel Admin: {admin_page_title_prefix}")
        st.write(f"[DEBUG Main Panel] Renderizando: {menu_admin}")

        if menu_admin == "üìä Vis√£o Geral e Diagn√≥sticos":
            st.subheader("üìä Vis√£o Geral e Diagn√≥sticos")
            st.markdown("Conte√∫do para Vis√£o Geral e Diagn√≥sticos (em desenvolvimento).")
            
        elif menu_admin == "üö¶ Status dos Clientes":
            st.subheader("üö¶ Status dos Clientes")
            st.markdown("Conte√∫do para Status dos Clientes (em desenvolvimento).")

        elif menu_admin == "üìú Hist√≥rico de Usu√°rios":
            st.subheader("üìú Hist√≥rico de Usu√°rios")
            
            df_historico_completo_hu = pd.DataFrame(columns=["Data", "CNPJ", "A√ß√£o", "Descri√ß√£o"])
            df_usuarios_para_filtro_hu = pd.DataFrame(columns=['CNPJ', 'Empresa', 'NomeContato'])
            try:
                if os.path.exists(historico_csv) and os.path.getsize(historico_csv) > 0:
                    df_historico_completo_hu = pd.read_csv(historico_csv, encoding='utf-8', dtype={'CNPJ': str})
                
                if os.path.exists(usuarios_csv) and os.path.getsize(usuarios_csv) > 0: # Carregar para filtro de empresa
                    df_usuarios_para_filtro_hu = pd.read_csv(usuarios_csv, encoding='utf-8', usecols=['CNPJ', 'Empresa', 'NomeContato'], dtype={'CNPJ': str})
            except Exception as e_hu_load: 
                st.error(f"Erro ao carregar dados para Hist√≥rico: {e_hu_load}")
            
            st.markdown("#### Filtros do Hist√≥rico")
            col_hu_f1, col_hu_f2 = st.columns(2)
            empresas_hist_list_hu = ["Todas"]
            if not df_usuarios_para_filtro_hu.empty and 'Empresa' in df_usuarios_para_filtro_hu.columns: 
                empresas_hist_list_hu.extend(sorted(df_usuarios_para_filtro_hu['Empresa'].astype(str).unique().tolist()))
            
            emp_sel_hu = col_hu_f1.selectbox("Filtrar por Empresa:", empresas_hist_list_hu, key=f"hist_emp_sel_{ST_KEY_VERSION}_hu_adm")
            termo_busca_hu = col_hu_f2.text_input("Buscar em Descri√ß√£o, A√ß√£o ou CNPJ:", key=f"hist_termo_busca_{ST_KEY_VERSION}_hu_adm")
            
            df_historico_filtrado_view_hu = df_historico_completo_hu.copy() 
            cnpjs_da_empresa_selecionada_hu = []

            if emp_sel_hu != "Todas" and not df_usuarios_para_filtro_hu.empty: 
                cnpjs_da_empresa_selecionada_hu = df_usuarios_para_filtro_hu[df_usuarios_para_filtro_hu['Empresa'] == emp_sel_hu]['CNPJ'].tolist()
                if not df_historico_filtrado_view_hu.empty:
                    df_historico_filtrado_view_hu = df_historico_filtrado_view_hu[df_historico_filtrado_view_hu['CNPJ'].isin(cnpjs_da_empresa_selecionada_hu)]
            
            if termo_busca_hu.strip() and not df_historico_filtrado_view_hu.empty :
                busca_lower_hu = termo_busca_hu.strip().lower()
                df_historico_filtrado_view_hu = df_historico_filtrado_view_hu[
                    df_historico_filtrado_view_hu['CNPJ'].astype(str).str.lower().str.contains(busca_lower_hu, na=False) | 
                    df_historico_filtrado_view_hu['A√ß√£o'].astype(str).str.lower().str.contains(busca_lower_hu, na=False) | 
                    df_historico_filtrado_view_hu['Descri√ß√£o'].astype(str).str.lower().str.contains(busca_lower_hu, na=False)
                ]
            
            st.markdown("#### Registros do Hist√≥rico")
            if not df_historico_filtrado_view_hu.empty:
                st.dataframe(df_historico_filtrado_view_hu.sort_values(by="Data", ascending=False))
                if st.button("üìÑ Baixar Hist√≥rico Filtrado (PDF)", key=f"download_hist_filtrado_pdf_{ST_KEY_VERSION}_hu_adm"):
                    # (A fun√ß√£o gerar_pdf_historico deve estar completa e funcional)
                    pdf_path_hist = gerar_pdf_historico(df_historico_filtrado_view_hu, f"Hist√≥rico - {emp_sel_hu}")
                    if pdf_path_hist:
                        with open(pdf_path_hist, "rb") as f_pdf_hist: 
                            st.download_button(label="Download PDF Confirmado", data=f_pdf_hist, file_name=f"historico_{sanitize_column_name(emp_sel_hu)}.pdf", mime="application/pdf", key=f"confirm_download_hist_pdf_{ST_KEY_VERSION}_hu_adm")
                        try: os.remove(pdf_path_hist) 
                        except: pass
                
                if emp_sel_hu != "Todas" and not df_historico_filtrado_view_hu.empty and cnpjs_da_empresa_selecionada_hu:
                    st.markdown("---")
                    st.markdown(f"#### üóëÔ∏è Resetar Hist√≥rico da Empresa: {emp_sel_hu}")
                    # ... (l√≥gica de exclus√£o como antes) ...
            else:
                st.info("Nenhum registro de hist√≥rico encontrado para os filtros aplicados.")

        # Placeholders para outras se√ß√µes
        elif menu_admin == "üìù Gerenciar Perguntas":
            st.subheader("üìù Gerenciar Perguntas")
            st.markdown("Conte√∫do para Gerenciar Perguntas (em desenvolvimento).")
        # ... (adicione placeholders para TODAS as outras op√ß√µes de menu_admin_options)
        else:
            st.warning(f"[DEBUG ADMIN Main Panel] Op√ß√£o de menu '{menu_admin}' n√£o corresponde a nenhum bloco if/elif.")
        
        st.write(f"[DEBUG ADMIN Main Panel] PONTO MP4 - Ap√≥s dispatch do menu")

    except Exception as e_outer_admin_critical:
        st.error(f"Um erro cr√≠tico ocorreu na √°rea administrativa: {e_outer_admin_critical}")
        st.exception(e_outer_admin_critical)

if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False) and ('aba' not in locals() or aba is None):
    st.info("Fallback final: Selecione se voc√™ √© Administrador ou Cliente para continuar.")