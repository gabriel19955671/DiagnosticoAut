# --- √ÅREA DO ADMINISTRADOR LOGADO ---
if aba == "Administrador" and st.session_state.admin_logado:
    try:
        st.sidebar.image("https://via.placeholder.com/200x80.png?text=Logo+Admin", use_container_width=True)
    except Exception as e_img_admin:
        st.sidebar.caption(f"Logo admin n√£o carregada: {e_img_admin}")

    st.sidebar.success("üü¢ Admin Logado")

    if st.sidebar.button("üö™ Sair do Painel Admin", key="logout_admin_v16_final", use_container_width=True): # Chave atualizada
        st.session_state.admin_logado = False
        st.toast("Logout de admin realizado.", icon="üëã")
        st.rerun()

    menu_admin_options_map = { # Text key -> Emoji
        "Vis√£o Geral e Diagn√≥sticos": "üìä",
        "Hist√≥rico de Usu√°rios": "üìú",
        "Gerenciar Perguntas": "üìù",
        "Gerenciar An√°lises de Perguntas": "üí°",
        "Gerenciar Clientes": "üë•",
        "Gerenciar Administradores": "üëÆ"
    }
    admin_page_text_keys = list(menu_admin_options_map.keys())
    admin_options_for_display = [f"{menu_admin_options_map[key]} {key}" for key in admin_page_text_keys]

    SESSION_KEY_FOR_ADMIN_PAGE = "admin_current_page_text_key_v16_final" # Chave de sess√£o para a p√°gina atual (texto puro)
    WIDGET_KEY_SB_ADMIN_MENU = "sb_admin_menu_v16_final" # Chave para o widget selectbox

    # 1. Inicializar o estado da p√°gina admin se n√£o existir ou for inv√°lido
    if SESSION_KEY_FOR_ADMIN_PAGE not in st.session_state or \
       st.session_state[SESSION_KEY_FOR_ADMIN_PAGE] not in admin_page_text_keys:
        st.session_state[SESSION_KEY_FOR_ADMIN_PAGE] = admin_page_text_keys[0] # Default para a primeira p√°gina

    # 2. Fun√ß√£o on_change para o selectbox
    def admin_menu_on_change():
        # O widget selectbox (com key WIDGET_KEY_SB_ADMIN_MENU) armazena o valor "emoji Texto"
        selected_display_value_from_widget = st.session_state[WIDGET_KEY_SB_ADMIN_MENU]
        
        # Converter o valor de display de volta para a chave de texto puro
        new_text_key = None
        for text_key, emoji in menu_admin_options_map.items():
            if f"{emoji} {text_key}" == selected_display_value_from_widget:
                new_text_key = text_key
                break
        
        # Atualizar nossa vari√°vel de estado principal (SESSION_KEY_FOR_ADMIN_PAGE)
        # se a sele√ß√£o realmente mudou
        if new_text_key and new_text_key != st.session_state.get(SESSION_KEY_FOR_ADMIN_PAGE):
            st.session_state[SESSION_KEY_FOR_ADMIN_PAGE] = new_text_key
            # O st.rerun() n√£o √© estritamente necess√°rio aqui porque a mudan√ßa no selectbox j√° causa um rerun.
            # No entanto, se voc√™ quisesse for√ßar um rerun IMEDIATAMENTE ap√≥s atualizar o estado
            # (antes do Streamlit completar seu pr√≥prio ciclo de rerun do widget), voc√™ poderia, mas geralmente n√£o √© preciso.

    # 3. Determinar o √≠ndice atual para o selectbox
    # Este valor √© a chave de texto puro da p√°gina que DEVE estar selecionada
    current_admin_page_text_key_for_index = st.session_state[SESSION_KEY_FOR_ADMIN_PAGE]
    
    try:
        # O √≠ndice deve ser baseado na lista de op√ß√µes que o selectbox realmente usa (admin_options_for_display)
        # Ent√£o, primeiro constru√≠mos o valor de display esperado para a p√°gina atual
        expected_display_value_for_current_page = f"{menu_admin_options_map[current_admin_page_text_key_for_index]} {current_admin_page_text_key_for_index}"
        current_admin_menu_index = admin_options_for_display.index(expected_display_value_for_current_page)
    except (ValueError, KeyError): # KeyError se current_admin_page_text_key_for_index n√£o estiver no map (improv√°vel com a inicializa√ß√£o)
        # Fallback: se algo der muito errado, default para o √≠ndice 0
        current_admin_menu_index = 0
        st.session_state[SESSION_KEY_FOR_ADMIN_PAGE] = admin_page_text_keys[0] # Resetar o estado para consist√™ncia

    # 4. Renderizar o selectbox
    st.sidebar.selectbox(
        "Funcionalidades Admin:",
        options=admin_options_for_display,
        index=current_admin_menu_index, # Este √© o ponto crucial para mostrar a sele√ß√£o correta
        key=WIDGET_KEY_SB_ADMIN_MENU,   # Chave do widget
        on_change=admin_menu_on_change  # Callback para atualizar nosso estado principal
    )

    # 5. Usar a vari√°vel de estado principal para a l√≥gica da p√°gina
    menu_admin = st.session_state[SESSION_KEY_FOR_ADMIN_PAGE]
    header_display_name = f"{menu_admin_options_map[menu_admin]} {menu_admin}" # Recria o nome com emoji para o header
    st.header(header_display_name)
    # ... resto do c√≥digo do admin ...