import streamlit as st
import pandas as pd
from datetime import datetime, date
import os
import time
from fpdf import FPDF 
import tempfile
import re
import json
import plotly.express as px
import plotly.graph_objects as go 
import uuid

st.set_page_config(page_title="Portal de Diagn√≥stico", layout="wide", initial_sidebar_state="expanded")

# CSS (Mantido como antes)
st.markdown("""
<style>
.login-container { max-width: 400px; margin: 60px auto 0 auto; padding: 40px; border-radius: 8px; background-color: #ffffff; box-shadow: 0 4px 12px rgba(0,0,0,0.15); font-family: 'Segoe UI', sans-serif; }
.login-container h2 { text-align: center; margin-bottom: 30px; font-weight: 600; font-size: 26px; color: #2563eb; }
/* ... (resto do CSS omitido para brevidade, mantenha o seu CSS original) ... */
.kpi-card .value { font-size: 1.8em; font-weight: bold; color: #2563eb; }
</style>
""", unsafe_allow_html=True)

st.title("üîí Portal de Diagn√≥stico")

admin_credenciais_csv = "admins.csv"
usuarios_csv = "usuarios.csv"
arquivo_csv = "diagnosticos_clientes.csv"
usuarios_bloqueados_csv = "usuarios_bloqueados.csv"
perguntas_csv = "perguntas_formulario.csv"
historico_csv = "historico_clientes.csv"
analises_perguntas_csv = "analises_perguntas.csv"
notificacoes_csv = "notificacoes.csv"
instrucoes_txt_file = "instrucoes_clientes.txt"
LOGOS_DIR = "client_logos"
ST_KEY_VERSION = "v24_debug" # Chave atualizada para depura√ß√£o

default_session_state = {
    "admin_logado": False, "cliente_logado": False, "diagnostico_enviado_sucesso": False,
    "inicio_sessao_cliente": None, "cliente_page": "Instru√ß√µes", "cnpj": None, "user": None,
    "progresso_diagnostico_percentual": 0, "progresso_diagnostico_contagem": (0,0),
    "respostas_atuais_diagnostico": {}, "id_formulario_atual": None,
    "pdf_gerado_path": None, "pdf_gerado_filename": None,
    "feedbacks_respostas": {},
    "confirmou_instrucoes_checkbox_cliente": False,
    "admin_user_login_identifier": None,
    "last_cnpj_input": "" # Adicionado para persistir o √∫ltimo CNPJ
}
for key, value in default_session_state.items():
    if key not in st.session_state:
        st.session_state[key] = value

def sanitize_column_name(name):
    s = str(name).strip().replace(' ', '_'); s = re.sub(r'(?u)[^-\w.]', '', s); return s
def pdf_safe_text_output(text): 
    return str(text).encode('latin-1', 'replace').decode('latin-1')
def find_client_logo_path(cnpj_arg):
    if not cnpj_arg: return None
    base = str(cnpj_arg).replace('/', '').replace('.', '').replace('-', '')
    for ext in ["png", "jpg", "jpeg"]:
        path = os.path.join(LOGOS_DIR, f"{base}_logo.{ext}")
        if os.path.exists(path): return path
    return None

if not os.path.exists(LOGOS_DIR):
    try: os.makedirs(LOGOS_DIR)
    except OSError as e: st.error(f"Erro ao criar diret√≥rio de logos '{LOGOS_DIR}': {e}")

colunas_base_diagnosticos = ["Data", "CNPJ", "Nome", "Email", "Empresa", "M√©dia Geral", "GUT M√©dia", "Observa√ß√µes", "Diagn√≥stico", "An√°lise do Cliente", "Comentarios_Admin"]
colunas_base_usuarios = ["CNPJ", "Senha", "Empresa", "NomeContato", "Telefone",
                         "ConfirmouInstrucoesParaSlotAtual", "DiagnosticosDisponiveis", "TotalDiagnosticosRealizados", "LiberacoesExtrasConcedidas"]
# ... (outras colunas base)

def inicializar_csv(filepath, columns, defaults=None):
    try:
        if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:
            df_init = pd.DataFrame(columns=columns)
            if defaults:
                for col, default_val in defaults.items():
                    if col in columns: df_init[col] = default_val
            df_init.to_csv(filepath, index=False, encoding='utf-8')
        else:
            # Simplificado para brevidade, a l√≥gica anterior de verifica√ß√£o de colunas pode ser mantida
            pass
    except Exception as e:
        st.error(f"Erro Cr√≠tico ao inicializar ou ler o arquivo {filepath}: {e}")
        # N√£o levantar exce√ß√£o aqui para permitir que o app tente carregar

try:
    inicializar_csv(usuarios_bloqueados_csv, ["CNPJ"])
    inicializar_csv(admin_credenciais_csv, ["Usuario", "Senha"])
    # ... (outras chamadas inicializar_csv)
    if not os.path.exists(instrucoes_txt_file):
        with open(instrucoes_txt_file, "w", encoding="utf-8") as f:
            f.write("""**Bem-vindo!** (Instru√ß√µes simplificadas)""")
except Exception as e_init_global:
    st.error(f"‚ö†Ô∏è ERRO CR√çTICO NA INICIALIZA√á√ÉO GLOBAL DE ARQUIVOS: {e_init_global}")
    st.exception(e_init_global); st.stop() 

# --- Fun√ß√µes PDF (mantidas, mas n√£o ser√£o chamadas nesta vers√£o de depura√ß√£o do admin) ---
def gerar_pdf_diagnostico_completo(diag_data, user_data, perguntas_df, respostas_coletadas, medias_cat, analises_df):
    # ... (c√≥digo da fun√ß√£o como corrigido anteriormente)
    st.info("gerar_pdf_diagnostico_completo chamada (placeholder)")
    return None 
def gerar_pdf_historico(df_historico_filtrado, titulo="Hist√≥rico de A√ß√µes"):
    # ... (c√≥digo da fun√ß√£o como corrigido anteriormente)
    st.info("gerar_pdf_historico chamada (placeholder)")
    return None

# --- Outras Fun√ß√µes Utilit√°rias (Notifica√ß√£o, A√ß√£o, Usu√°rio, An√°lise) - OMITIDAS POR BREVIDADE ---
# Mantenha suas fun√ß√µes aqui. Elas n√£o s√£o o foco do erro "nada aparece".

# --- L√≥gica de Login e Navega√ß√£o Principal ---
if st.session_state.get("trigger_rerun_global"): 
    st.session_state.trigger_rerun_global = False
    st.rerun()

st.sidebar.write(f"DEBUG (antes do radio): admin_logado={st.session_state.get('admin_logado', False)}, cliente_logado={st.session_state.get('cliente_logado', False)}")

if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False):
    aba = st.radio("Voc√™ √©:", ["Administrador", "Cliente"], horizontal=True, key=f"tipo_usuario_radio_{ST_KEY_VERSION}") 
elif st.session_state.get("admin_logado", False): 
    aba = "Administrador"
else: 
    aba = "Cliente"

st.sidebar.write(f"DEBUG (ap√≥s radio): aba='{aba}'")

# --- √ÅREA DE LOGIN DO ADMINISTRADOR ---
if aba == "Administrador" and not st.session_state.get("admin_logado", False):
    st.markdown('<div class="login-container">', unsafe_allow_html=True)
    st.markdown('<h2 class="login-title">Login Administrador üîë</h2>', unsafe_allow_html=True)
    with st.form(f"form_admin_login_{ST_KEY_VERSION}"): 
        u = st.text_input("Usu√°rio", key=f"admin_u_{ST_KEY_VERSION}")
        p = st.text_input("Senha", type="password", key=f"admin_p_{ST_KEY_VERSION}") 
        if st.form_submit_button("Entrar"):
            try:
                if os.path.exists(admin_credenciais_csv) and os.path.getsize(admin_credenciais_csv) > 0:
                    df_creds = pd.read_csv(admin_credenciais_csv, encoding='utf-8')
                    admin_encontrado = df_creds[df_creds["Usuario"] == u]
                    if not admin_encontrado.empty and admin_encontrado.iloc[0]["Senha"] == p:
                        st.session_state.admin_logado = True
                        st.session_state.admin_user_login_identifier = u 
                        st.success("Login de administrador bem-sucedido! ‚úÖ"); st.rerun()
                    else: st.error("Usu√°rio ou senha inv√°lidos.")
                else:
                     st.error(f"Arquivo de credenciais '{admin_credenciais_csv}' n√£o encontrado ou vazio.")
            except Exception as e: st.error(f"Erro no login admin: {e}")
    st.markdown('</div>', unsafe_allow_html=True); st.stop()

# --- √ÅREA DE LOGIN DO CLIENTE ---
if aba == "Cliente" and not st.session_state.get("cliente_logado", False):
    st.markdown('<div class="login-container">', unsafe_allow_html=True)
    st.markdown('<h2 class="login-title">Login Cliente üè¢</h2>', unsafe_allow_html=True)
    # ... (Seu c√≥digo de login do cliente aqui, com chaves ST_KEY_VERSION)
    st.markdown("Formul√°rio de login do cliente aqui...") # Placeholder
    if st.button("Login Cliente (Placeholder)", key=f"login_cliente_placeholder_{ST_KEY_VERSION}"):
        st.info("Bot√£o de login cliente placeholder clicado.")
    st.markdown('</div>', unsafe_allow_html=True); st.stop()


# --- √ÅREA DO CLIENTE LOGADO ---
if aba == "Cliente" and st.session_state.get("cliente_logado", False):
    st.sidebar.markdown(f"### Bem-vindo(a), {st.session_state.user.get('Empresa', 'Cliente')}! üëã")
    # ... (Resto da sidebar do cliente)
    if st.sidebar.button(f"‚¨ÖÔ∏è Sair do Portal Cliente", key=f"logout_cliente_{ST_KEY_VERSION}"):
        # ... (l√≥gica de logout do cliente)
        st.session_state.cliente_logado = False
        st.rerun()
    
    st.header(f"√Årea do Cliente - {st.session_state.get('cliente_page', 'N/A')}")
    st.markdown(f"Conte√∫do da p√°gina do cliente: **{st.session_state.get('cliente_page', 'N/A')}**")
    st.markdown("--- Conte√∫do da √°rea do cliente ---")


# --- √ÅREA DO ADMINISTRADOR LOGADO (RADICALMENTE SIMPLIFICADA PARA DEPURA√á√ÉO) ---
if aba == "Administrador" and st.session_state.get("admin_logado", False):
    st.sidebar.write("[DEBUG ADMIN] Entrou no bloco admin_logado.") 
    try:
        st.sidebar.success("üü¢ Admin Logado")
        if st.sidebar.button(f"üö™ Sair do Painel Admin", key=f"logout_admin_{ST_KEY_VERSION}_adm"): 
            st.session_state.admin_logado = False
            if 'admin_user_login_identifier' in st.session_state:
                del st.session_state.admin_user_login_identifier
            st.rerun() 
        
        menu_admin_options = [
            "üìä Vis√£o Geral e Diagn√≥sticos", 
            "üö¶ Status dos Clientes", 
            "üìú Hist√≥rico de Usu√°rios",
            "üìù Gerenciar Perguntas", 
            "üí° Gerenciar An√°lises de Perguntas",
            "‚úçÔ∏è Gerenciar Instru√ß√µes Clientes", 
            "üë• Gerenciar Clientes", 
            "üëÆ Gerenciar Administradores", 
            "üíæ Backup de Dados"
        ]
        menu_admin = st.sidebar.selectbox( # Adicionado key aqui
            "Funcionalidades Admin:", 
            menu_admin_options, 
            key=f"admin_menu_selectbox_{ST_KEY_VERSION}_adm" 
        )
        
        st.sidebar.info(f"[DEBUG ADMIN Sidebar] Op√ß√£o Selecionada: {menu_admin}")
        
        # Cabe√ßalho principal da p√°gina do admin
        # A linha abaixo pode causar erro se menu_admin for None ou n√£o for string
        if isinstance(menu_admin, str) and menu_admin:
            st.header(f"Painel Admin: {menu_admin.split(' ')[0]}") # Simplificado para evitar erro se split falhar
        else:
            st.header("Painel Admin")
            st.warning("[DEBUG ADMIN] menu_admin n√£o √© uma string v√°lida ou est√° vazio.")

        st.write(f"[DEBUG ADMIN Main Panel] Renderizando se√ß√£o para: {menu_admin}")

        # L√≥gica de dispatch do menu admin (SUPER SIMPLIFICADA)
        if menu_admin == "üìä Vis√£o Geral e Diagn√≥sticos":
            st.subheader("üìä Vis√£o Geral e Diagn√≥sticos")
            st.markdown("Conte√∫do para Vis√£o Geral e Diagn√≥sticos (em desenvolvimento).")
            
        elif menu_admin == "üö¶ Status dos Clientes":
            st.subheader("üö¶ Status dos Clientes")
            st.markdown("Conte√∫do para Status dos Clientes (em desenvolvimento).")

        elif menu_admin == "üìú Hist√≥rico de Usu√°rios":
            st.subheader("üìú Hist√≥rico de Usu√°rios")
            st.markdown("Conte√∫do para Hist√≥rico de Usu√°rios (em desenvolvimento).")
            # O bot√£o de PDF e a l√≥gica de exclus√£o seriam reintroduzidos aqui gradualmente.
            if st.button("Teste PDF Hist√≥rico (Simples)", key=f"pdf_hist_placeholder_btn_{ST_KEY_VERSION}"):
                st.info("Geraria PDF do hist√≥rico aqui.")


        elif menu_admin == "üìù Gerenciar Perguntas":
            st.subheader("üìù Gerenciar Perguntas")
            st.markdown("Conte√∫do para Gerenciar Perguntas (em desenvolvimento).")

        elif menu_admin == "üí° Gerenciar An√°lises de Perguntas":
            st.subheader("üí° Gerenciar An√°lises de Perguntas")
            st.markdown("Conte√∫do para Gerenciar An√°lises de Perguntas (em desenvolvimento).")
            
        elif menu_admin == "‚úçÔ∏è Gerenciar Instru√ß√µes Clientes":
            st.subheader("‚úçÔ∏è Gerenciar Instru√ß√µes Clientes")
            st.markdown("Conte√∫do para Gerenciar Instru√ß√µes Clientes (em desenvolvimento).")

        elif menu_admin == "üë• Gerenciar Clientes":
            st.subheader("üë• Gerenciar Clientes")
            st.markdown("Conte√∫do para Gerenciar Clientes (em desenvolvimento).")

        elif menu_admin == "üëÆ Gerenciar Administradores":
            st.subheader("üëÆ Gerenciar Administradores")
            st.markdown("Conte√∫do para Gerenciar Administradores (em desenvolvimento).")

        elif menu_admin == "üíæ Backup de Dados":
            st.subheader("üíæ Backup de Dados")
            st.markdown("Conte√∫do para Backup de Dados (em desenvolvimento).")
        
        else:
            st.warning(f"Op√ß√£o de menu '{menu_admin}' n√£o implementada ou n√£o reconhecida no dispatch.")

    except Exception as e_outer_admin_critical:
        st.error(f"Um erro cr√≠tico ocorreu na √°rea administrativa: {e_outer_admin_critical}")
        st.exception(e_outer_admin_critical) 

if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False) and 'aba' not in locals() :
    # Este bloco s√≥ executa se nenhuma das condi√ß√µes de login ou aba foi satisfeita antes,
    # o que pode indicar um problema no fluxo inicial.
    st.info("Selecione se voc√™ √© Administrador ou Cliente para continuar (Fallback).")