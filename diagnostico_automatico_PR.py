import streamlit as st
import pandas as pd
from datetime import datetime, date
import os
import time
from fpdf import FPDF 
import tempfile
import re
import json
import plotly.express as px
import plotly.graph_objects as go 
import uuid

st.set_page_config(page_title="Portal de Diagn√≥stico", layout="wide", initial_sidebar_state="expanded")

# !!!!! PASSO DE DEPURA√á√ÉO CRUCIAL !!!!!
# !!!!! O BLOCO DE CSS ABAIXO EST√Å INTENCIONALMENTE COMENTADO PARA ESTE TESTE. !!!!!
# !!!!! POR FAVOR, EXECUTE O C√ìDIGO DESTA FORMA PRIMEIRO. !!!!!
# !!!!! SE O CONTE√öDO DO ADMIN APARECER, O PROBLEMA √â O SEU CSS. !!!!!
"""
st.markdown(f\""" 
<style>
{''' 
.login-container { max-width: 400px; margin: 60px auto 0 auto; padding: 40px; border-radius: 8px; background-color: #ffffff; box-shadow: 0 4px 12px rgba(0,0,0,0.15); font-family: 'Segoe UI', sans-serif; }
.login-container h2 { text-align: center; margin-bottom: 30px; font-weight: 600; font-size: 26px; color: #2563eb; }
.stButton>button { border-radius: 6px; background-color: #2563eb; color: white; font-weight: 500; padding: 0.5rem 1.2rem; margin-top: 0.5rem; }
.stDownloadButton>button { background-color: #10b981; color: white; font-weight: 600; border-radius: 6px; margin-top: 10px; padding: 0.5rem 1.2rem; }
.stTextInput>div>input, .stTextArea>div>textarea { border-radius: 6px; padding: 0.4rem; border: 1px solid #d1d5db; background-color: #f9fafb; }
.stTabs [data-baseweb="tab"] { font-size: 16px; font-weight: 600; padding: 10px 20px; }
.custom-card { border: 1px solid #e0e0e0; border-left: 5px solid #2563eb; padding: 15px; margin-bottom: 15px; border-radius: 5px; background-color: #f9f9f9; }
.custom-card h4 { margin-top: 0; color: #2563eb; }
.feedback-saved { font-size: 0.85em; color: green; font-style: italic; margin-top: -8px; margin-bottom: 8px; }
.analise-pergunta-cliente { font-size: 0.9em; color: #555; background-color: #f0f8ff; border-left: 3px solid #1e90ff; padding: 8px; margin-top: 5px; margin-bottom:10px; border-radius: 3px;}
.notification-dot { height: 8px; width: 8px; background-color: red; border-radius: 50%; display: inline-block; margin-left: 5px; }
.kpi-card { background-color: #f9f9f9; padding: 15px; border-radius: 8px; border: 1px solid #e0e0e0; text-align: center; margin-bottom: 10px; }
.kpi-card h4 { font-size: 1.1em; color: #333; margin-bottom: 5px; }
.kpi-card .value { font-size: 1.8em; font-weight: bold; color: #2563eb; }
'''}
</style>
\""", unsafe_allow_html=True)
"""

st.title("üîí Portal de Diagn√≥stico")

# --- Configura√ß√µes de Arquivos ---
admin_credenciais_csv = "admins.csv"
usuarios_csv = "usuarios.csv"
arquivo_csv = "diagnosticos_clientes.csv"
usuarios_bloqueados_csv = "usuarios_bloqueados.csv"
perguntas_csv = "perguntas_formulario.csv"
historico_csv = "historico_clientes.csv"
analises_perguntas_csv = "analises_perguntas.csv"
notificacoes_csv = "notificacoes.csv"
instrucoes_txt_file = "instrucoes_clientes.txt"
LOGOS_DIR = "client_logos"
ST_KEY_VERSION = "v28_final_css_test" 

# --- Inicializa√ß√£o do Session State ---
default_session_state = {
    "admin_logado": False, "cliente_logado": False, "diagnostico_enviado_sucesso": False,
    "inicio_sessao_cliente": None, "cliente_page": "Instru√ß√µes", "cnpj": None, "user": None,
    "progresso_diagnostico_percentual": 0, "progresso_diagnostico_contagem": (0,0),
    "respostas_atuais_diagnostico": {}, "id_formulario_atual": None,
    "pdf_gerado_path": None, "pdf_gerado_filename": None,
    "feedbacks_respostas": {},
    "confirmou_instrucoes_checkbox_cliente": False,
    "admin_user_login_identifier": None, "last_cnpj_input": "" 
} 
for key, value in default_session_state.items():
    if key not in st.session_state:
        st.session_state[key] = value

# --- Fun√ß√µes Utilit√°rias ---
def sanitize_column_name(name):
    s = str(name).strip().replace(' ', '_'); s = re.sub(r'(?u)[^-\w.]', '', s); return s
def pdf_safe_text_output(text): 
    return str(text).encode('latin-1', 'replace').decode('latin-1')
def find_client_logo_path(cnpj_arg):
    if not cnpj_arg: return None
    base = str(cnpj_arg).replace('/', '').replace('.', '').replace('-', '')
    for ext in ["png", "jpg", "jpeg"]:
        path = os.path.join(LOGOS_DIR, f"{base}_logo.{ext}")
        if os.path.exists(path): return path
    return None

if not os.path.exists(LOGOS_DIR):
    try: os.makedirs(LOGOS_DIR)
    except OSError as e: st.error(f"Erro ao criar diret√≥rio de logos '{LOGOS_DIR}': {e}")

colunas_base_diagnosticos = ["Data", "CNPJ", "Nome", "Email", "Empresa", "M√©dia Geral", "GUT M√©dia", "Observa√ß√µes", "Diagn√≥stico", "An√°lise do Cliente", "Comentarios_Admin"]
colunas_base_usuarios = ["CNPJ", "Senha", "Empresa", "NomeContato", "Telefone",
                         "ConfirmouInstrucoesParaSlotAtual", "DiagnosticosDisponiveis", "TotalDiagnosticosRealizados", "LiberacoesExtrasConcedidas"]
colunas_base_perguntas = ["Pergunta", "Categoria"]
colunas_base_analises = ["ID_Analise", "TextoPerguntaOriginal", "TipoCondicao", "CondicaoValorMin", "CondicaoValorMax", "CondicaoValorExato", "TextoAnalise"]
colunas_base_notificacoes = ["ID_Notificacao", "CNPJ_Cliente", "Mensagem", "DataHora", "Lida"]

def inicializar_csv(filepath, columns, defaults=None):
    try:
        if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:
            df_init = pd.DataFrame(columns=columns)
            if defaults:
                for col, default_val in defaults.items():
                    if col in columns: df_init[col] = default_val
            df_init.to_csv(filepath, index=False, encoding='utf-8')
        else:
            try:
                df_check = pd.read_csv(filepath, encoding='utf-8', nrows=0) 
                dtype_map_read = {}
                if filepath == usuarios_csv or filepath == usuarios_bloqueados_csv or filepath == arquivo_csv or filepath == historico_csv:
                    if 'CNPJ' in columns: dtype_map_read['CNPJ'] = str
                if filepath == notificacoes_csv:
                    if 'CNPJ_Cliente' in columns: dtype_map_read['CNPJ_Cliente'] = str
                
                temp_df_to_save = pd.read_csv(filepath, encoding='utf-8', dtype=dtype_map_read if dtype_map_read else None)
                col_missing = False

                for col_idx, col_name in enumerate(columns):
                    if col_name not in df_check.columns:
                        default_val = defaults.get(col_name, pd.NA) if defaults else pd.NA
                        if pd.api.types.is_numeric_dtype(default_val) and defaults and not pd.isna(default_val):
                             temp_df_to_save.insert(loc=min(col_idx, len(temp_df_to_save.columns)), column=col_name, value=pd.Series([default_val] * len(temp_df_to_save), dtype=type(default_val)))
                        else:
                             temp_df_to_save.insert(loc=min(col_idx, len(temp_df_to_save.columns)), column=col_name, value=default_val)
                        col_missing = True
                if col_missing:
                    temp_df_to_save.to_csv(filepath, index=False, encoding='utf-8')
            except pd.errors.EmptyDataError: 
                df_init = pd.DataFrame(columns=columns)
                if defaults:
                    for col, default_val in defaults.items():
                        if col in columns: df_init[col] = default_val
                df_init.to_csv(filepath, index=False, encoding='utf-8')
    except Exception as e:
        st.error(f"Erro Cr√≠tico ao inicializar ou ler o arquivo {filepath}: {e}")

try:
    inicializar_csv(admin_credenciais_csv, ["Usuario", "Senha"])
    if not (os.path.exists(admin_credenciais_csv) and os.path.getsize(admin_credenciais_csv) > 0):
        pd.DataFrame([{"Usuario": "admin", "Senha": "admin"}]).to_csv(admin_credenciais_csv, index=False, encoding='utf-8')
        st.sidebar.info("Admin padr√£o (admin/admin) criado para primeiro uso.")

    inicializar_csv(usuarios_bloqueados_csv, ["CNPJ"])
    inicializar_csv(usuarios_csv, colunas_base_usuarios, defaults={"ConfirmouInstrucoesParaSlotAtual": "False", "DiagnosticosDisponiveis": 1, "TotalDiagnosticosRealizados": 0, "LiberacoesExtrasConcedidas": 0})
    inicializar_csv(perguntas_csv, colunas_base_perguntas, defaults={"Categoria": "Geral"})
    inicializar_csv(historico_csv, ["Data", "CNPJ", "A√ß√£o", "Descri√ß√£o"]) 
    inicializar_csv(arquivo_csv, colunas_base_diagnosticos) 
    inicializar_csv(analises_perguntas_csv, colunas_base_analises)
    inicializar_csv(notificacoes_csv, colunas_base_notificacoes, defaults={"Lida": False}) 
    if not os.path.exists(instrucoes_txt_file):
        with open(instrucoes_txt_file, "w", encoding="utf-8") as f:
            f.write("""**Bem-vindo ao Portal de Diagn√≥stico Empresarial!** (Conte√∫do padr√£o das instru√ß√µes)""")
except Exception as e_init_global:
    st.error(f"‚ö†Ô∏è ERRO CR√çTICO NA INICIALIZA√á√ÉO GLOBAL DE ARQUIVOS: {e_init_global}")
    st.exception(e_init_global); st.stop() 

# --- Fun√ß√µes Utilit√°rias Completas ---
def criar_notificacao(cnpj_cliente, mensagem, data_diag_ref=None):
    try:
        df_notificacoes = pd.DataFrame(columns=colunas_base_notificacoes)
        if os.path.exists(notificacoes_csv) and os.path.getsize(notificacoes_csv) > 0:
            df_notificacoes = pd.read_csv(notificacoes_csv, dtype={'CNPJ_Cliente': str}, encoding='utf-8')
        
        msg_final = mensagem
        if data_diag_ref:
            msg_final = f"O consultor adicionou coment√°rios ao seu diagn√≥stico de {data_diag_ref}."
        nova_notificacao = {"ID_Notificacao": str(uuid.uuid4()), "CNPJ_Cliente": str(cnpj_cliente), "Mensagem": msg_final, "DataHora": datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "Lida": False}
        df_notificacoes = pd.concat([df_notificacoes, pd.DataFrame([nova_notificacao])], ignore_index=True)
        df_notificacoes.to_csv(notificacoes_csv, index=False, encoding='utf-8')
    except Exception as e: st.warning(f"Falha ao criar notifica√ß√£o: {e}")

def get_unread_notifications_count(cnpj_cliente):
    try:
        if os.path.exists(notificacoes_csv) and os.path.getsize(notificacoes_csv) > 0:
            df_notificacoes = pd.read_csv(notificacoes_csv, dtype={'CNPJ_Cliente': str}, encoding='utf-8')
            unread_count = len(df_notificacoes[(df_notificacoes['CNPJ_Cliente'] == str(cnpj_cliente)) & (df_notificacoes['Lida'] == False)])
            return unread_count
    except Exception as e: st.warning(f"Falha ao ler notifica√ß√µes: {e}")
    return 0

def marcar_notificacoes_como_lidas(cnpj_cliente, ids_notificacoes=None):
    try:
        if os.path.exists(notificacoes_csv) and os.path.getsize(notificacoes_csv) > 0:
            df_notificacoes = pd.read_csv(notificacoes_csv, dtype={'CNPJ_Cliente': str}, encoding='utf-8')
            if ids_notificacoes:
                df_notificacoes.loc[(df_notificacoes['CNPJ_Cliente'] == str(cnpj_cliente)) & (df_notificacoes['ID_Notificacao'].isin(ids_notificacoes)), 'Lida'] = True
            else:
                df_notificacoes.loc[df_notificacoes['CNPJ_Cliente'] == str(cnpj_cliente), 'Lida'] = True
            df_notificacoes.to_csv(notificacoes_csv, index=False, encoding='utf-8')
            return True
    except Exception as e: st.error(f"Erro ao marcar notifica√ß√µes como lidas: {e}"); 
    return False

def registrar_acao(cnpj, acao, desc):
    try:
        df_hist = pd.DataFrame(columns=["Data", "CNPJ", "A√ß√£o", "Descri√ß√£o"])
        if os.path.exists(historico_csv) and os.path.getsize(historico_csv) > 0:
            df_hist = pd.read_csv(historico_csv, encoding='utf-8', dtype={'CNPJ': str})
        
        new_entry = pd.DataFrame([{"Data": datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
                                   "CNPJ": str(cnpj), "A√ß√£o": str(acao), "Descri√ß√£o": str(desc)}])
        df_hist = pd.concat([df_hist, new_entry], ignore_index=True)
        df_hist.to_csv(historico_csv, index=False, encoding='utf-8')
    except Exception as e: st.warning(f"Falha ao registrar a√ß√£o no hist√≥rico: {e}")


def update_user_data(cnpj, field, value):
    try:
        if not (os.path.exists(usuarios_csv) and os.path.getsize(usuarios_csv) > 0) :
            st.error(f"Arquivo de usu√°rios '{usuarios_csv}' n√£o encontrado para atualiza√ß√£o."); return False
        users_df = pd.read_csv(usuarios_csv, dtype={'CNPJ': str}, encoding='utf-8')
        idx = users_df[users_df['CNPJ'] == str(cnpj)].index
        if not idx.empty:
            users_df.loc[idx, field] = value
            users_df.to_csv(usuarios_csv, index=False, encoding='utf-8')
            # Atualizar st.session_state.user se o usu√°rio logado for o afetado
            if 'user' in st.session_state and st.session_state.user and str(st.session_state.user.get('CNPJ')) == str(cnpj):
                if field in ["DiagnosticosDisponiveis", "TotalDiagnosticosRealizados", "LiberacoesExtrasConcedidas"] and value is not None:
                    try: st.session_state.user[field] = int(value)
                    except ValueError: st.warning(f"Valor inv√°lido '{value}' para campo num√©rico '{field}' ao atualizar session_state.")
                elif field == "ConfirmouInstrucoesParaSlotAtual":
                    st.session_state.user[field] = str(value).lower() == "true"
                else:
                    st.session_state.user[field] = value
            return True
        else:
            st.warning(f"Usu√°rio com CNPJ {cnpj} n√£o encontrado para atualiza√ß√£o.")
    except Exception as e: st.error(f"Erro ao atualizar usu√°rio ({field}): {e}")
    return False

@st.cache_data
def carregar_analises_perguntas():
    try: 
        if os.path.exists(analises_perguntas_csv) and os.path.getsize(analises_perguntas_csv) > 0:
            return pd.read_csv(analises_perguntas_csv, encoding='utf-8')
    except Exception as e: st.warning(f"Erro ao carregar an√°lises: {e}")
    return pd.DataFrame(columns=colunas_base_analises)

def obter_analise_para_resposta(pergunta_texto, resposta_valor, df_analises):
    if df_analises is None or df_analises.empty: return None
    # ... (sua l√≥gica completa aqui)
    return None

# --- Fun√ß√µes PDF (Use as vers√µes que voc√™ confirmou que funcionam) ---
def gerar_pdf_diagnostico_completo(diag_data, user_data, perguntas_df, respostas_coletadas, medias_cat, analises_df):
    # (Use sua vers√£o funcional desta fun√ß√£o)
    st.info("gerar_pdf_diagnostico_completo (placeholder - Restaure sua l√≥gica)")
    return None 
def gerar_pdf_historico(df_historico_filtrado, titulo="Hist√≥rico de A√ß√µes"):
    # (Use a vers√£o desta fun√ß√£o que voc√™ confirmou que o PDF estava OK)
    st.info(f"Gerando PDF do Hist√≥rico (placeholder): {titulo}")
    return "dummy_historico.pdf" # Placeholder
# --- FIM DAS FUN√á√ïES PDF ---


# --- L√≥gica de Login e Navega√ß√£o Principal ---
# ... (c√≥digo de sele√ß√£o de aba mantido como antes)
if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False):
    aba = st.radio("Voc√™ √©:", ["Administrador", "Cliente"], horizontal=True, key=f"tipo_usuario_radio_{ST_KEY_VERSION}") 
elif st.session_state.get("admin_logado", False): 
    aba = "Administrador"
else: 
    aba = "Cliente"
st.sidebar.write(f"DEBUG (ap√≥s radio): aba='{aba}'")


# --- √ÅREA DE LOGIN DO ADMINISTRADOR (RESTAURADA) ---
if aba == "Administrador" and not st.session_state.get("admin_logado", False):
    # (Mantenha o CSS do login-container COMENTADO no st.markdown principal para este teste)
    st.markdown('<div>', unsafe_allow_html=True) 
    st.markdown(f'<h2>Login Administrador üîë</h2>', unsafe_allow_html=True)
    with st.form(f"form_admin_login_{ST_KEY_VERSION}"): 
        u = st.text_input("Usu√°rio", key=f"admin_u_{ST_KEY_VERSION}")
        p = st.text_input("Senha", type="password", key=f"admin_p_{ST_KEY_VERSION}") 
        if st.form_submit_button("Entrar"):
            try:
                if os.path.exists(admin_credenciais_csv) and os.path.getsize(admin_credenciais_csv) > 0:
                    df_creds = pd.read_csv(admin_credenciais_csv, encoding='utf-8')
                    admin_encontrado = df_creds[df_creds["Usuario"] == u]
                    if not admin_encontrado.empty and str(admin_encontrado.iloc[0]["Senha"]) == str(p):
                        st.session_state.admin_logado = True
                        st.session_state.admin_user_login_identifier = u 
                        st.success("Login de administrador bem-sucedido! ‚úÖ"); st.rerun()
                    else: st.error("Usu√°rio ou senha inv√°lidos.")
                else: st.error(f"Arquivo de credenciais '{admin_credenciais_csv}' n√£o encontrado ou vazio.")
            except Exception as e: st.error(f"Erro no login admin: {e}")
    st.markdown('</div>', unsafe_allow_html=True); st.stop()

# --- √ÅREA DE LOGIN DO CLIENTE (RESTAURADA) ---
if aba == "Cliente" and not st.session_state.get("cliente_logado", False):
    st.markdown('<div>', unsafe_allow_html=True) 
    st.markdown(f'<h2>Login Cliente üè¢</h2>', unsafe_allow_html=True)
    with st.form(f"form_cliente_login_{ST_KEY_VERSION}"): 
        c = st.text_input("CNPJ", key=f"cli_c_{ST_KEY_VERSION}", value=st.session_state.get("last_cnpj_input","")) 
        s = st.text_input("Senha", type="password", key=f"cli_s_{ST_KEY_VERSION}") 
        if st.form_submit_button("Entrar Cliente"):
            st.session_state.last_cnpj_input = c
            try:
                if not (os.path.exists(usuarios_csv) and os.path.getsize(usuarios_csv) > 0):
                    st.error(f"Arquivo de usu√°rios '{usuarios_csv}' n√£o encontrado ou vazio. Contate o administrador.")
                    st.stop()
                users_df = pd.read_csv(usuarios_csv, dtype={'CNPJ': str}, encoding='utf-8')
                # ... (resto da sua l√≥gica de login cliente validada) ...
                match = users_df[(users_df["CNPJ"] == c) & (users_df["Senha"] == str(s))]
                if match.empty: st.error("CNPJ ou senha inv√°lidos."); st.stop()
                st.session_state.cliente_logado = True; st.session_state.cnpj = c
                st.session_state.user = match.iloc[0].to_dict()
                # ... (resto da configura√ß√£o do st.session_state.user) ...
                st.success("Login cliente OK! ‚úÖ"); st.rerun()
            except Exception as e: st.error(f"Erro login cliente: {e}"); st.exception(e)
    st.markdown('</div>', unsafe_allow_html=True); st.stop()


# --- √ÅREA DO CLIENTE LOGADO (RESTAURADA - SUBSTITUA PELO SEU C√ìDIGO COMPLETO) ---
if aba == "Cliente" and st.session_state.get("cliente_logado", False):
    st.sidebar.markdown(f"### Bem-vindo(a), {st.session_state.get('user',{}).get('Empresa','Cliente')}! üëã") 
    if st.sidebar.button(f"Sair Cliente", key=f"logout_cliente_{ST_KEY_VERSION}"):
        st.session_state.cliente_logado = False
        # Limpe st.session_state.user, st.session_state.cnpj, etc.
        st.rerun()
    
    st.header(f"Painel Cliente: {st.session_state.get('cliente_page', 'P√°gina Desconhecida')}")
    st.markdown("Substitua este placeholder pelo conte√∫do real da √°rea do cliente, incluindo o menu de p√°ginas do cliente e a l√≥gica de cada p√°gina.")
    # Exemplo:
    # if st.session_state.cliente_page == "Instru√ß√µes":
    #     st.write("Conte√∫do das Instru√ß√µes aqui...")
    # elif st.session_state.cliente_page == "Novo Diagn√≥stico":
    #     st.write("Conte√∫do do Novo Diagn√≥stico aqui...")


# --- √ÅREA DO ADMINISTRADOR LOGADO (COM HIST√ìRICO RESTAURADO E OUTROS PLACEHOLDERS) ---
if aba == "Administrador" and st.session_state.get("admin_logado", False):
    st.sidebar.write(f"[DEBUG ADMIN] PONTO S1 - Entrou no bloco admin_logado.") 
    try:
        st.sidebar.success("üü¢ Admin Logado")
        if st.sidebar.button(f"üö™ Sair do Painel Admin", key=f"logout_admin_{ST_KEY_VERSION}_adm"): 
            st.session_state.admin_logado = False
            if 'admin_user_login_identifier' in st.session_state:
                del st.session_state.admin_user_login_identifier
            st.rerun() 
        
        menu_admin_options = [
            "üìä Vis√£o Geral e Diagn√≥sticos", "üö¶ Status dos Clientes", "üìú Hist√≥rico de Usu√°rios",
            "üìù Gerenciar Perguntas", "üí° Gerenciar An√°lises de Perguntas",
            "‚úçÔ∏è Gerenciar Instru√ß√µes Clientes", "üë• Gerenciar Clientes", 
            "üëÆ Gerenciar Administradores", "üíæ Backup de Dados"
        ]
        menu_admin = st.sidebar.selectbox(
            "Funcionalidades Admin:", 
            menu_admin_options, 
            key=f"admin_menu_selectbox_{ST_KEY_VERSION}_adm" 
        )
        st.sidebar.info(f"[DEBUG Sidebar] Op√ß√£o: '{menu_admin}'")
        
        admin_page_title_prefix = menu_admin.split(' ')[0] if isinstance(menu_admin, str) and menu_admin else "Admin"
        st.header(f"Painel Admin: {admin_page_title_prefix}")
        st.write(f"[DEBUG Main Panel] Renderizando: {menu_admin}")

        if menu_admin == "üìä Vis√£o Geral e Diagn√≥sticos":
            st.subheader("üìä Vis√£o Geral e Diagn√≥sticos")
            st.markdown("CONTE√öDO DE TESTE VIS√çVEL: Vis√£o Geral e Diagn√≥sticos.")
            
        elif menu_admin == "üö¶ Status dos Clientes":
            st.subheader("üö¶ Status dos Clientes")
            st.markdown("CONTE√öDO DE TESTE VIS√çVEL: Status dos Clientes.")

        elif menu_admin == "üìú Hist√≥rico de Usu√°rios":
            st.subheader("üìú Hist√≥rico de Usu√°rios")
            st.markdown("CONTE√öDO DE TESTE VIS√çVEL: Hist√≥rico de Usu√°rios.") # Placeholder inicial
            
            # Carregamento de dados DENTRO da se√ß√£o espec√≠fica
            df_historico_completo_hu = pd.DataFrame(columns=["Data", "CNPJ", "A√ß√£o", "Descri√ß√£o"])
            df_usuarios_para_filtro_hu = pd.DataFrame(columns=['CNPJ', 'Empresa', 'NomeContato'])
            try:
                if os.path.exists(historico_csv) and os.path.getsize(historico_csv) > 0:
                    df_historico_completo_hu = pd.read_csv(historico_csv, encoding='utf-8', dtype={'CNPJ': str})
                
                if os.path.exists(usuarios_csv) and os.path.getsize(usuarios_csv) > 0: 
                    df_usuarios_para_filtro_hu = pd.read_csv(usuarios_csv, encoding='utf-8', usecols=['CNPJ', 'Empresa', 'NomeContato'], dtype={'CNPJ': str})

            except Exception as e_hu_load: 
                st.error(f"Erro ao carregar dados para Hist√≥rico: {e_hu_load}")
            
            if not (df_historico_completo_hu.empty and df_usuarios_para_filtro_hu.empty):
                st.markdown("#### Filtros do Hist√≥rico")
                col_hu_f1, col_hu_f2 = st.columns(2)
                empresas_hist_list_hu = ["Todas"]
                if not df_usuarios_para_filtro_hu.empty and 'Empresa' in df_usuarios_para_filtro_hu.columns: 
                    empresas_hist_list_hu.extend(sorted(df_usuarios_para_filtro_hu['Empresa'].astype(str).unique().tolist()))
                
                emp_sel_hu = col_hu_f1.selectbox("Filtrar por Empresa:", empresas_hist_list_hu, key=f"hist_emp_sel_{ST_KEY_VERSION}_hu_adm")
                termo_busca_hu = col_hu_f2.text_input("Buscar em Descri√ß√£o, A√ß√£o ou CNPJ:", key=f"hist_termo_busca_{ST_KEY_VERSION}_hu_adm")
                
                df_historico_filtrado_view_hu = df_historico_completo_hu.copy() 
                cnpjs_da_empresa_selecionada_hu = []

                if emp_sel_hu != "Todas" and not df_usuarios_para_filtro_hu.empty: 
                    cnpjs_da_empresa_selecionada_hu = df_usuarios_para_filtro_hu[df_usuarios_para_filtro_hu['Empresa'] == emp_sel_hu]['CNPJ'].tolist()
                    if not df_historico_filtrado_view_hu.empty:
                        df_historico_filtrado_view_hu = df_historico_filtrado_view_hu[df_historico_filtrado_view_hu['CNPJ'].isin(cnpjs_da_empresa_selecionada_hu)]
                
                if termo_busca_hu.strip() and not df_historico_filtrado_view_hu.empty :
                    busca_lower_hu = termo_busca_hu.strip().lower()
                    df_historico_filtrado_view_hu = df_historico_filtrado_view_hu[
                        df_historico_filtrado_view_hu['CNPJ'].astype(str).str.lower().str.contains(busca_lower_hu, na=False) | 
                        df_historico_filtrado_view_hu['A√ß√£o'].astype(str).str.lower().str.contains(busca_lower_hu, na=False) | 
                        df_historico_filtrado_view_hu['Descri√ß√£o'].astype(str).str.lower().str.contains(busca_lower_hu, na=False)
                    ]
                
                st.markdown("#### Registros do Hist√≥rico")
                if not df_historico_filtrado_view_hu.empty:
                    st.dataframe(df_historico_filtrado_view_hu.sort_values(by="Data", ascending=False))
                    if st.button("üìÑ Baixar Hist√≥rico Filtrado (PDF)", key=f"download_hist_filtrado_pdf_{ST_KEY_VERSION}_hu_adm"):
                        # (A fun√ß√£o gerar_pdf_historico deve estar completa e funcional)
                        pdf_path_hist = gerar_pdf_historico(df_historico_filtrado_view_hu, f"Hist√≥rico - {emp_sel_hu}")
                        if pdf_path_hist and os.path.exists(pdf_path_hist): # Checar se o path √© v√°lido
                            with open(pdf_path_hist, "rb") as f_pdf_hist: 
                                st.download_button(label="Download PDF Confirmado", data=f_pdf_hist, file_name=f"historico_{sanitize_column_name(emp_sel_hu)}.pdf", mime="application/pdf", key=f"confirm_download_hist_pdf_{ST_KEY_VERSION}_hu_adm")
                            try: os.remove(pdf_path_hist) 
                            except: pass
                        else:
                             st.error("Falha ao gerar ou encontrar o PDF do hist√≥rico.")
                
                    if emp_sel_hu != "Todas" and not df_historico_filtrado_view_hu.empty and cnpjs_da_empresa_selecionada_hu:
                        st.markdown("---")
                        st.markdown(f"#### üóëÔ∏è Resetar Hist√≥rico da Empresa: {emp_sel_hu}")
                        with st.expander(f"‚ö†Ô∏è ATEN√á√ÉO: Excluir TODO o hist√≥rico da Empresa '{emp_sel_hu}'"):
                            st.warning(f"Esta a√ß√£o √© irrevers√≠vel...") # Texto completo da warning aqui
                            confirm_text_delete_hist = st.text_input(f"Para confirmar, digite '{emp_sel_hu}':", key=f"confirm_text_delete_hist_emp_{emp_sel_hu}_{ST_KEY_VERSION}").strip()
                            if st.button(f"üóëÔ∏è Excluir Hist√≥rico de '{emp_sel_hu}' AGORA", type="primary", key=f"btn_delete_hist_emp_{emp_sel_hu}_{ST_KEY_VERSION}", disabled=(confirm_text_delete_hist != emp_sel_hu)):
                                # (L√≥gica de exclus√£o como antes)
                                st.info("L√≥gica de exclus√£o de hist√≥rico aqui.")
                else:
                    st.info("Nenhum registro de hist√≥rico encontrado para os filtros aplicados.")
            else:
                st.info("Arquivos de hist√≥rico ou usu√°rios n√£o encontrados ou vazios. Verifique a inicializa√ß√£o.")


        elif menu_admin == "üìù Gerenciar Perguntas":
            st.subheader("üìù Gerenciar Perguntas")
            st.markdown("CONTE√öDO DE TESTE VIS√çVEL: Gerenciar Perguntas.")
        # ... (adicione placeholders para TODAS as outras op√ß√µes de menu_admin_options)
        else:
            st.warning(f"[DEBUG ADMIN Main Panel] Op√ß√£o de menu '{menu_admin}' n√£o correspondeu a nenhum bloco if/elif.")
        
        st.write(f"[DEBUG ADMIN Main Panel] PONTO MP4 - Ap√≥s dispatch do menu")

    except Exception as e_outer_admin_critical:
        st.error(f"Um erro cr√≠tico ocorreu na √°rea administrativa: {e_outer_admin_critical}")
        st.exception(e_outer_admin_critical)

if not st.session_state.get("admin_logado", False) and not st.session_state.get("cliente_logado", False) and ('aba' not in locals() or aba is None):
    st.info("Fallback final: Selecione se voc√™ √© Administrador ou Cliente para continuar.")