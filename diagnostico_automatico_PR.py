import streamlit as st
import pandas as pd
from datetime import datetime
import os
import time
from fpdf import FPDF
import tempfile
import re 
import json
import plotly.express as px

st.set_page_config(page_title="Portal de Diagn√≥stico", layout="wide") 

# CSS
st.markdown("""
<style>
.login-container {
    max-width: 400px;
    margin: 60px auto 0 auto;
    padding: 40px;
    border-radius: 8px;
    background-color: #ffffff;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    font-family: 'Segoe UI', sans-serif;
}
.login-container h2 {
    text-align: center;
    margin-bottom: 30px;
    font-weight: 600;
    font-size: 26px;
    color: #2563eb;
}
.stButton>button {
    border-radius: 6px;
    background-color: #2563eb;
    color: white;
    font-weight: 500;
    padding: 0.5rem 1.2rem;
    margin-top: 0.5rem;
}
.stDownloadButton>button {
    background-color: #10b981;
    color: white;
    font-weight: 600;
    border-radius: 6px;
    margin-top: 10px;
    padding: 0.5rem 1.2rem;
}
.stTextInput>div>input, .stTextArea>div>textarea {
    border-radius: 6px;
    padding: 0.4rem;
    border: 1px solid #d1d5db;
    background-color: #f9fafb;
}
.stTabs [data-baseweb="tab"] {
    font-size: 16px;
    font-weight: 600;
    padding: 10px 20px;
}
.custom-card {
    border: 1px solid #e0e0e0;
    border-left: 5px solid #2563eb; 
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 5px;
    background-color: #f9f9f9;
}
.custom-card h4 {
    margin-top: 0;
    color: #2563eb;
}
</style>
""", unsafe_allow_html=True)

st.title("üîí Portal de Diagn√≥stico")

# --- Configura√ß√£o de Arquivos e Vari√°veis Globais ---
admin_credenciais_csv = "admins.csv"
usuarios_csv = "usuarios.csv" 
arquivo_csv = "diagnosticos_clientes.csv"
usuarios_bloqueados_csv = "usuarios_bloqueados.csv"
perguntas_csv = "perguntas_formulario.csv" 
historico_csv = "historico_clientes.csv"
LOGOS_DIR = "client_logos" 

# --- Inicializa√ß√£o do Session State ---
if "admin_logado" not in st.session_state: st.session_state.admin_logado = False
if "cliente_logado" not in st.session_state: st.session_state.cliente_logado = False
if "diagnostico_enviado" not in st.session_state: st.session_state.diagnostico_enviado = False
if "inicio_sessao_cliente" not in st.session_state: st.session_state.inicio_sessao_cliente = None
if "cliente_page" not in st.session_state: st.session_state.cliente_page = "Painel Principal"
if "cnpj" not in st.session_state: st.session_state.cnpj = None
if "user" not in st.session_state: st.session_state.user = None

# --- Fun√ß√µes Utilit√°rias ---
def sanitize_column_name(name):
    s = str(name).strip().replace(' ', '_')
    s = re.sub(r'(?u)[^-\w.]', '', s) 
    return s

def pdf_safe_text_output(text):
    return str(text).encode('latin-1', 'replace').decode('latin-1')

def find_client_logo_path(cnpj):
    if not cnpj: return None
    for ext in ["png", "jpg", "jpeg"]:
        path = os.path.join(LOGOS_DIR, f"{str(cnpj)}_logo.{ext}")
        if os.path.exists(path):
            return path
    return None

# --- Cria√ß√£o e Verifica√ß√£o de Arquivos e Pastas ---
if not os.path.exists(LOGOS_DIR):
    try:
        os.makedirs(LOGOS_DIR)
    except OSError as e:
        st.error(f"N√£o foi poss√≠vel criar o diret√≥rio de logos '{LOGOS_DIR}': {e}")

colunas_base_diagnosticos = [
    "Data", "CNPJ", "Nome", "Email", "Empresa",
    "M√©dia Geral", "GUT M√©dia", "Observa√ß√µes", "Diagn√≥stico", 
    "An√°lise do Cliente", "Comentarios_Admin"
]
colunas_base_usuarios = ["CNPJ", "Senha", "Empresa", "NomeContato", "Telefone"]
colunas_base_perguntas = ["Pergunta", "Categoria"]

def inicializar_csv(filepath, columns, is_perguntas_file=False):
    try:
        if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:
            df = pd.DataFrame(columns=columns)
            df.to_csv(filepath, index=False, encoding='utf-8')
        else:
            df = pd.read_csv(filepath, encoding='utf-8')
            missing_cols = [col for col in columns if col not in df.columns]
            made_changes = False
            if missing_cols:
                for col in missing_cols:
                    if is_perguntas_file and col == "Categoria": df[col] = "Geral"
                    else: df[col] = pd.NA 
                made_changes = True
            if is_perguntas_file and "Categoria" not in df.columns:
                df["Categoria"] = "Geral"; made_changes = True
            if made_changes:
                df.to_csv(filepath, index=False, encoding='utf-8')
    except pd.errors.EmptyDataError: 
        pd.DataFrame(columns=columns).to_csv(filepath, index=False, encoding='utf-8')
    except Exception as e:
        st.error(f"Erro ao inicializar/verificar {filepath}: {e}. O app pode n√£o funcionar corretamente.")

try:
    inicializar_csv(usuarios_bloqueados_csv, ["CNPJ"])
    inicializar_csv(admin_credenciais_csv, ["Usuario", "Senha"])
    inicializar_csv(usuarios_csv, colunas_base_usuarios)
    inicializar_csv(perguntas_csv, colunas_base_perguntas, is_perguntas_file=True)
    inicializar_csv(historico_csv, ["Data", "CNPJ", "A√ß√£o", "Descri√ß√£o"])
    inicializar_csv(arquivo_csv, colunas_base_diagnosticos)
except Exception as e_init_etapa1:
    st.error(f"Falha cr√≠tica na inicializa√ß√£o de arquivos CSV base: {e_init_etapa1}")
    st.exception(e_init_etapa1); st.stop()


def registrar_acao(cnpj, acao, descricao):
    try:
        historico_df = pd.read_csv(historico_csv, encoding='utf-8') 
    except (FileNotFoundError, pd.errors.EmptyDataError): 
        historico_df = pd.DataFrame(columns=["Data", "CNPJ", "A√ß√£o", "Descri√ß√£o"])
    nova_data = { "Data": datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "CNPJ": cnpj, "A√ß√£o": acao, "Descri√ß√£o": descricao }
    historico_df = pd.concat([historico_df, pd.DataFrame([nova_data])], ignore_index=True)
    historico_df.to_csv(historico_csv, index=False, encoding='utf-8')


def gerar_pdf_diagnostico_completo(diagnostico_data, usuario_data, perguntas_df_geracao, respostas_coletadas_geracao, medias_categorias_geracao):
    try:
        pdf = FPDF()
        pdf.add_page()
        empresa_nome_pdf = usuario_data.get("Empresa", "N/D")
        cnpj_pdf = usuario_data.get("CNPJ", "N/D")
        nome_contato_pdf = usuario_data.get("NomeContato", "")
        telefone_pdf = usuario_data.get("Telefone", "")
        
        logo_path_pdf = find_client_logo_path(cnpj_pdf)
        if logo_path_pdf:
            try: pdf.image(logo_path_pdf, x=10, y=8, w=33); pdf.ln(20)
            except Exception: pass # Ignora erro de logo no PDF

        pdf.set_font("Arial", 'B', 16); pdf.cell(0, 10, pdf_safe_text_output(f"Diagn√≥stico Empresarial - {empresa_nome_pdf}"), 0, 1, 'C'); pdf.ln(5)
        pdf.set_font("Arial", size=10)
        pdf.multi_cell(0, 7, pdf_safe_text_output(f"Data: {diagnostico_data.get('Data','N/D')}"))
        pdf.multi_cell(0, 7, pdf_safe_text_output(f"Empresa: {empresa_nome_pdf} (CNPJ: {cnpj_pdf})"))
        if nome_contato_pdf: pdf.multi_cell(0, 7, pdf_safe_text_output(f"Contato: {nome_contato_pdf}"))
        if telefone_pdf: pdf.multi_cell(0, 7, pdf_safe_text_output(f"Telefone: {telefone_pdf}"))
        pdf.ln(3)
        pdf.multi_cell(0, 7, pdf_safe_text_output(f"M√©dia Geral (Num√©rica): {diagnostico_data.get('M√©dia Geral','N/A')}"))
        pdf.multi_cell(0, 7, pdf_safe_text_output(f"M√©dia Scores GUT (G*U*T): {diagnostico_data.get('GUT M√©dia','N/A')}"))
        pdf.ln(3)

        if medias_categorias_geracao:
            pdf.set_font("Arial", 'B', 11); pdf.multi_cell(0, 7, pdf_safe_text_output("M√©dias por Categoria:"))
            pdf.set_font("Arial", size=10)
            for cat_pdf, media_cat_pdf in medias_categorias_geracao.items():
                pdf.multi_cell(0, 6, pdf_safe_text_output(f"  - {cat_pdf}: {media_cat_pdf}"))
            pdf.ln(5)

        for titulo, campo_dado in [("Resumo (Cliente):", "Diagn√≥stico"), 
                                  ("An√°lise/Observa√ß√µes do Cliente:", "An√°lise do Cliente"),
                                  ("Coment√°rios do Consultor:", "Comentarios_Admin")]:
            valor_campo = diagnostico_data.get(campo_dado, "")
            if valor_campo and not pd.isna(valor_campo):
                pdf.set_font("Arial", 'B', 12); pdf.multi_cell(0, 7, pdf_safe_text_output(titulo))
                pdf.set_font("Arial", size=10); pdf.multi_cell(0, 7, pdf_safe_text_output(valor_campo)); pdf.ln(3)
            
        pdf.set_font("Arial", 'B', 12); pdf.multi_cell(0, 10, pdf_safe_text_output("Respostas Detalhadas por Categoria:"))
        categorias_unicas_pdf = []
        if perguntas_df_geracao is not None and "Categoria" in perguntas_df_geracao.columns: 
            categorias_unicas_pdf = perguntas_df_geracao["Categoria"].unique()
        
        for categoria_pdf_det in categorias_unicas_pdf:
            pdf.set_font("Arial", 'B', 10); pdf.multi_cell(0, 7, pdf_safe_text_output(f"Categoria: {categoria_pdf_det}"))
            pdf.set_font("Arial", size=9)
            perguntas_cat_pdf_det = perguntas_df_geracao[perguntas_df_geracao["Categoria"] == categoria_pdf_det]
            for _, p_row_pdf_det in perguntas_cat_pdf_det.iterrows():
                txt_p_pdf_det = p_row_pdf_det["Pergunta"]
                resp_p_pdf_det = respostas_coletadas_geracao.get(txt_p_pdf_det, diagnostico_data.get(txt_p_pdf_det, "N/R"))

                if isinstance(txt_p_pdf_det, str) and "[Matriz GUT]" in txt_p_pdf_det: 
                    g_pdf, u_pdf, t_pdf, score_gut_item_pdf = 0,0,0,0
                    if isinstance(resp_p_pdf_det, dict): 
                        g_pdf,u_pdf,t_pdf = resp_p_pdf_det.get("G",0), resp_p_pdf_det.get("U",0), resp_p_pdf_det.get("T",0)
                    elif isinstance(resp_p_pdf_det, str): 
                        try: 
                            gut_data_pdf = json.loads(resp_p_pdf_det.replace("'", "\""))
                            g_pdf,u_pdf,t_pdf = gut_data_pdf.get("G",0), gut_data_pdf.get("U",0), gut_data_pdf.get("T",0)
                        except: pass 
                    score_gut_item_pdf = g_pdf*u_pdf*t_pdf
                    pdf.multi_cell(0,6,pdf_safe_text_output(f"  - {txt_p_pdf_det.replace(' [Matriz GUT]','')}: G={g_pdf}, U={u_pdf}, T={t_pdf} (Score: {score_gut_item_pdf})"))
                elif isinstance(resp_p_pdf_det, (int, float, str)): 
                    pdf.multi_cell(0, 6, pdf_safe_text_output(f"  - {txt_p_pdf_det}: {resp_p_pdf_det}"))
            pdf.ln(2)
        pdf.ln(3)
        
        pdf.add_page(); pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, pdf_safe_text_output("Plano de A√ß√£o Sugerido (Kanban - GUT)"), 0, 1, 'C'); pdf.ln(5)
        pdf.set_font("Arial", size=10)
        gut_cards_pdf = [] 
        for pergunta_pdf_k, resp_pdf_k_val in respostas_coletadas_geracao.items(): 
            if isinstance(pergunta_pdf_k, str) and "[Matriz GUT]" in pergunta_pdf_k:
                g_k, u_k, t_k = 0,0,0
                if isinstance(resp_pdf_k_val, dict):
                    g_k, u_k, t_k = resp_pdf_k_val.get("G",0), resp_pdf_k_val.get("U",0), resp_pdf_k_val.get("T",0)
                elif isinstance(resp_pdf_k_val, str): 
                    try: 
                        gut_data_k = json.loads(resp_pdf_k_val.replace("'", "\""))
                        g_k,u_k,t_k = gut_data_k.get("G",0), gut_data_k.get("U",0), gut_data_k.get("T",0)
                    except: pass
                score_gut_total_k_pdf = g_k * u_k * t_k
                prazo_k_pdf = "N/A"
                if score_gut_total_k_pdf >= 75: prazo_k_pdf = "15 dias"
                elif score_gut_total_k_pdf >= 40: prazo_k_pdf = "30 dias"
                elif score_gut_total_k_pdf >= 20: prazo_k_pdf = "45 dias"
                elif score_gut_total_k_pdf > 0: prazo_k_pdf = "60 dias"
                else: continue
                if prazo_k_pdf != "N/A":
                    gut_cards_pdf.append({"Tarefa": pergunta_pdf_k.replace(" [Matriz GUT]", ""),"Prazo": prazo_k_pdf, "Score": score_gut_total_k_pdf})
        if gut_cards_pdf:
            gut_cards_pdf_sorted = sorted(gut_cards_pdf, key=lambda x_pdf_s: (int(x_pdf_s["Prazo"].split(" ")[0]), -x_pdf_s["Score"])) 
            for card_item_pdf in gut_cards_pdf_sorted: 
                 pdf.multi_cell(0, 6, pdf_safe_text_output(f"Prazo: {card_item_pdf['Prazo']} - Tarefa: {card_item_pdf['Tarefa']} (Score GUT: {card_item_pdf['Score']})"))
        else: pdf.multi_cell(0,6, pdf_safe_text_output("Nenhuma a√ß√£o priorit√°ria (GUT > 0) identificada."))

        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile_final_pdf_gen:
            pdf_path_final_pdf_gen = tmpfile_final_pdf_gen.name
            pdf.output(pdf_path_final_pdf_gen)
        return pdf_path_final_pdf_gen
    except Exception as e_pdf_main_gen:
        st.error(f"Erro cr√≠tico ao gerar PDF: {e_pdf_main_gen}")
        st.exception(e_pdf_main_gen); return None

# --- L√≥gica de Login e Navega√ß√£o Principal ---
if st.session_state.get("trigger_cliente_rerun"): st.session_state.trigger_cliente_rerun = False; st.rerun()
if st.session_state.get("trigger_admin_rerun"): st.session_state.trigger_admin_rerun = False; st.rerun()

if not st.session_state.admin_logado and not st.session_state.cliente_logado:
    aba = st.radio("Voc√™ √©:", ["Administrador", "Cliente"], horizontal=True, key="tipo_usuario_radio_etapa1")
elif st.session_state.admin_logado: aba = "Administrador"
else: aba = "Cliente"

if aba == "Administrador" and not st.session_state.admin_logado:
    # ... (C√≥digo do login do Admin mantido)
    pass
if aba == "Cliente" and not st.session_state.cliente_logado:
    # ... (C√≥digo do login do Cliente mantido)
    pass

# --- √ÅREA DO CLIENTE LOGADO ---
if aba == "Cliente" and st.session_state.cliente_logado:
    # ... (C√≥digo COMPLETO da √Årea do Cliente Logado, como na vers√£o anterior, j√° funcional)
    # Incluindo: Sidebar com "Meu Perfil" (logo, nome, telefone), Painel Principal, Novo Diagn√≥stico
    pass

# --- √ÅREA DO ADMINISTRADOR LOGADO ---
if aba == "Administrador" and st.session_state.admin_logado:
    st.sidebar.image("https://raw.githubusercontent.com/AndersonCRMG/AppDiagnostico/main/Logo%20Transparente%20(1).png", width=100)
    st.sidebar.success("üü¢ Admin Logado")

    if st.sidebar.button("üö™ Sair do Painel Admin"):
        st.session_state.admin_logado = False; st.rerun() 

    menu_admin = st.sidebar.selectbox( 
        "Funcionalidades Admin:",
        ["Vis√£o Geral e Diagn√≥sticos", "Hist√≥rico de Usu√°rios", "Gerenciar Perguntas", 
         "Gerenciar Clientes", "Gerenciar Administradores"],
        key="admin_menu_selectbox_etapa1" 
    )
    st.header(f"üîë Painel Admin: {menu_admin}")

    try: 
        if menu_admin == "Vis√£o Geral e Diagn√≥sticos":
            st.subheader("üìä Vis√£o Geral dos Diagn√≥sticos")

            diagnosticos_df_admin = None 
            admin_data_loaded = False
            try:
                if not os.path.exists(arquivo_csv) or os.path.getsize(arquivo_csv) == 0:
                    st.warning(f"Arquivo de diagn√≥sticos ({arquivo_csv}) n√£o encontrado ou vazio. Nenhum dado para exibir.")
                else:
                    diagnosticos_df_admin = pd.read_csv(arquivo_csv, encoding='utf-8')
                    if diagnosticos_df_admin.empty:
                        st.info("Arquivo de diagn√≥sticos lido, mas n√£o cont√©m dados.")
                    else:
                        admin_data_loaded = True
            except Exception as e_load_diag_admin_vis:
                st.error(f"Erro ao carregar diagn√≥sticos: {e_load_diag_admin_vis}")
                st.exception(e_load_diag_admin_vis)
            
            if admin_data_loaded and diagnosticos_df_admin is not None and not diagnosticos_df_admin.empty:
                # --- NOVO: Filtro de Cliente/Empresa para Vis√£o Geral ---
                empresas_disponiveis_vg = ["Todos os Clientes"] + sorted(diagnosticos_df_admin["Empresa"].astype(str).unique().tolist())
                empresa_selecionada_vg = st.selectbox(
                    "Filtrar Vis√£o Geral por Empresa:", 
                    empresas_disponiveis_vg, 
                    key="admin_visao_geral_filtro_empresa_vg"
                )

                df_filtrado_vg = diagnosticos_df_admin.copy()
                if empresa_selecionada_vg != "Todos os Clientes":
                    df_filtrado_vg = df_filtrado_vg[df_filtrado_vg["Empresa"] == empresa_selecionada_vg]
                
                if df_filtrado_vg.empty:
                    st.info(f"Nenhum diagn√≥stico encontrado para '{empresa_selecionada_vg}' com os filtros atuais.")
                else:
                    st.markdown(f"#### Indicadores Gerais para: {empresa_selecionada_vg}")
                    col_ig1_vg, col_ig2_vg, col_ig3_vg = st.columns(3)
                    with col_ig1_vg: st.metric("üì¶ Total de Diagn√≥sticos Selecionados", len(df_filtrado_vg))
                    with col_ig2_vg:
                        media_geral_todos_vg = pd.to_numeric(df_filtrado_vg["M√©dia Geral"], errors='coerce').mean()
                        st.metric("üìà M√©dia Geral", f"{media_geral_todos_vg:.2f}" if pd.notna(media_geral_todos_vg) else "N/A")
                    with col_ig3_vg:
                        if "GUT M√©dia" in df_filtrado_vg.columns:
                            gut_media_todos_vg = pd.to_numeric(df_filtrado_vg["GUT M√©dia"], errors='coerce').mean()
                            st.metric("üî• GUT M√©dia (G*U*T)", f"{gut_media_todos_vg:.2f}" if pd.notna(gut_media_todos_vg) else "N/A")
                        else: st.metric("üî• GUT M√©dia (G*U*T)", "N/A")
                    st.divider()

                    st.markdown(f"#### Evolu√ß√£o Mensal ({empresa_selecionada_vg})")
                    df_diag_vis_vg = df_filtrado_vg.copy()
                    df_diag_vis_vg["Data"] = pd.to_datetime(df_diag_vis_vg["Data"], errors="coerce")
                    df_diag_vis_vg = df_diag_vis_vg.dropna(subset=["Data"])
                    if not df_diag_vis_vg.empty:
                        df_diag_vis_vg["M√™s/Ano"] = df_diag_vis_vg["Data"].dt.to_period("M").astype(str) 
                        df_diag_vis_vg["M√©dia Geral"] = pd.to_numeric(df_diag_vis_vg["M√©dia Geral"], errors='coerce')
                        df_diag_vis_vg["GUT M√©dia"] = pd.to_numeric(df_diag_vis_vg.get("GUT M√©dia"), errors='coerce') if "GUT M√©dia" in df_diag_vis_vg else pd.Series(dtype='float64', index=df_diag_vis_vg.index)
                        
                        resumo_mensal_vg = df_diag_vis_vg.groupby("M√™s/Ano").agg(
                            Diagn√≥sticos_Realizados=("CNPJ", "count"), 
                            M√©dia_Geral_Mensal=("M√©dia Geral", "mean"),
                            GUT_M√©dia_Mensal=("GUT M√©dia", "mean")
                        ).reset_index().sort_values("M√™s/Ano")
                        resumo_mensal_vg["M√™s/Ano_Display"] = pd.to_datetime(resumo_mensal_vg["M√™s/Ano"], errors='coerce').dt.strftime('%b/%y')
                        
                        if not resumo_mensal_vg.empty:
                            fig_contagem_vg = px.bar(resumo_mensal_vg, x="M√™s/Ano_Display", y="Diagn√≥sticos_Realizados", title="Diagn√≥sticos por M√™s", height=350, labels={'Diagn√≥sticos_Realizados':'Total', "M√™s/Ano_Display": "M√™s"})
                            st.plotly_chart(fig_contagem_vg, use_container_width=True)
                            fig_medias_vg = px.line(resumo_mensal_vg, x="M√™s/Ano_Display", y=["M√©dia_Geral_Mensal", "GUT_M√©dia_Mensal"], title="M√©dias Gerais e GUT por M√™s", height=350, labels={'value':'M√©dia', 'variable':'Indicador', "M√™s/Ano_Display": "M√™s"})
                            fig_medias_vg.update_traces(mode='lines+markers')
                            st.plotly_chart(fig_medias_vg, use_container_width=True)
                        else: st.info("Sem dados para gr√°ficos de evolu√ß√£o mensal para a sele√ß√£o atual.")
                    else: st.info("Sem diagn√≥sticos com datas v√°lidas para evolu√ß√£o mensal para a sele√ß√£o atual.")
                    st.divider()
                
                # Rankings s√£o mostrados apenas se "Todos os Clientes" estiver selecionado
                if empresa_selecionada_vg == "Todos os Clientes":
                    st.markdown("#### Ranking das Empresas (M√©dia Geral)")
                    if "Empresa" in df_filtrado_vg.columns and "M√©dia Geral" in df_filtrado_vg.columns:
                        df_filtrado_vg["M√©dia Geral Num"] = pd.to_numeric(df_filtrado_vg["M√©dia Geral"], errors='coerce')
                        ranking_df_vg = df_filtrado_vg.dropna(subset=["M√©dia Geral Num"])
                        if not ranking_df_vg.empty:
                            ranking_vg = ranking_df_vg.groupby("Empresa")["M√©dia Geral Num"].mean().sort_values(ascending=False).reset_index()
                            ranking_vg.index = ranking_vg.index + 1
                            st.dataframe(ranking_vg.rename(columns={"M√©dia Geral Num": "M√©dia Geral (Ranking)"}))
                        else: st.info("Sem dados para ranking de M√©dia Geral.")
                    else: st.info("Colunas 'Empresa' ou 'M√©dia Geral' ausentes para ranking.")
                    st.divider()

                    # --- NOVO: Ranking GUT M√©dia ---
                    st.markdown("#### Ranking das Empresas (M√©dia GUT G*U*T)")
                    if "Empresa" in df_filtrado_vg.columns and "GUT M√©dia" in df_filtrado_vg.columns:
                        df_filtrado_vg["GUT M√©dia Num"] = pd.to_numeric(df_filtrado_vg["GUT M√©dia"], errors='coerce')
                        ranking_gut_df_vg = df_filtrado_vg.dropna(subset=["GUT M√©dia Num"])
                        if not ranking_gut_df_vg.empty and not ranking_gut_df_vg[ranking_gut_df_vg["GUT M√©dia Num"] > 0].empty : # Rankeia apenas se houver scores GUT > 0
                            ranking_gut_vg = ranking_gut_df_vg[ranking_gut_df_vg["GUT M√©dia Num"] > 0].groupby("Empresa")["GUT M√©dia Num"].mean().sort_values(ascending=False).reset_index()
                            ranking_gut_vg.index = ranking_gut_vg.index + 1
                            st.dataframe(ranking_gut_vg.rename(columns={"GUT M√©dia Num": "M√©dia Score GUT (Ranking)"}))
                        else: st.info("Sem dados ou scores GUT v√°lidos (>0) para ranking GUT.")
                    else: st.info("Colunas 'Empresa' ou 'GUT M√©dia' ausentes para ranking GUT.")
                    st.divider()

                st.markdown(f"#### Diagn√≥sticos Enviados ({empresa_selecionada_vg})")
                st.dataframe(df_filtrado_vg.sort_values(by="Data", ascending=False).reset_index(drop=True))
                if empresa_selecionada_vg == "Todos os Clientes":
                    csv_export_admin_vg = df_filtrado_vg.to_csv(index=False).encode('utf-8') 
                    st.download_button("‚¨áÔ∏è Exportar Sele√ß√£o Atual (CSV)", csv_export_admin_vg, file_name=f"diagnosticos_{sanitize_column_name(empresa_selecionada_vg)}.csv", mime="text/csv", key="download_selecao_csv_admin_vg")
                st.divider()
                
                st.markdown("#### Detalhar, Comentar e Baixar PDF de Diagn√≥stico Espec√≠fico")
                # Se uma empresa j√° foi selecionada no filtro principal, podemos pr√©-selecionar aqui ou simplificar.
                # Por ora, manteremos o seletor independente aqui para flexibilidade.
                empresas_detalhe = sorted(df_filtrado_vg["Empresa"].astype(str).unique().tolist())
                if not empresas_detalhe:
                    st.info("Nenhuma empresa na sele√ß√£o atual para detalhar.")
                else:
                    empresa_selecionada_detalhe = st.selectbox("Selecione uma Empresa para Detalhar:", ["Selecione..."] + empresas_detalhe, key="admin_empresa_filter_detail_final_v3")
                    if empresa_selecionada_detalhe != "Selecione...":
                        diagnosticos_empresa_detalhe = df_filtrado_vg[df_filtrado_vg["Empresa"] == empresa_selecionada_detalhe].sort_values(by="Data", ascending=False)
                        if not diagnosticos_empresa_detalhe.empty:
                            datas_diagnosticos_detalhe = ["Selecione Data..."] + diagnosticos_empresa_detalhe["Data"].tolist()
                            diagnostico_data_selecionada_detalhe = st.selectbox("Selecione a Data do Diagn√≥stico:", datas_diagnosticos_detalhe, key="admin_data_diagnostico_select_final_v3")
                            if diagnostico_data_selecionada_detalhe != "Selecione Data...":
                                diagnostico_selecionado_adm_row = diagnosticos_empresa_detalhe[diagnosticos_empresa_detalhe["Data"] == diagnostico_data_selecionada_detalhe].iloc[0]
                                # ... (Restante da l√≥gica para Comentar e Baixar PDF como antes) ...
            else: 
                st.warning("AVISO: Nenhum dado de diagn√≥stico carregado. A 'Vis√£o Geral' est√° limitada.")

        elif menu_admin == "Hist√≥rico de Usu√°rios":
            st.subheader("üìú Hist√≥rico de A√ß√µes dos Clientes")
            try:
                historico_df = pd.read_csv(historico_csv, encoding='utf-8')
                if not historico_df.empty:
                    st.dataframe(historico_df.sort_values(by="Data", ascending=False))
                else: st.info("Nenhum hist√≥rico de a√ß√µes encontrado.")
            except (FileNotFoundError, pd.errors.EmptyDataError): st.info("Arquivo de hist√≥rico n√£o encontrado ou vazio.")
            except Exception as e_hist: st.error(f"Erro ao carregar hist√≥rico: {e_hist}")

        elif menu_admin == "Gerenciar Perguntas":
            st.subheader("üìù Gerenciar Perguntas do Diagn√≥stico")
            tabs_perg_admin = st.tabs(["üìã Perguntas Atuais", "‚ûï Adicionar Nova Pergunta"])
            with tabs_perg_admin[0]: 
                try:
                    perguntas_df_admin_edit = pd.read_csv(perguntas_csv, encoding='utf-8')
                    if "Categoria" not in perguntas_df_admin_edit.columns: perguntas_df_admin_edit["Categoria"] = "Geral"
                except (FileNotFoundError, pd.errors.EmptyDataError): 
                    st.info("Arquivo de perguntas n√£o encontrado ou vazio.")
                    perguntas_df_admin_edit = pd.DataFrame(columns=colunas_base_perguntas)
                
                if perguntas_df_admin_edit.empty: st.info("Nenhuma pergunta cadastrada.")
                else:
                    for i_p_admin, row_p_admin in perguntas_df_admin_edit.iterrows():
                        cols_p_admin = st.columns([4, 2, 0.5, 0.5]) 
                        with cols_p_admin[0]:
                            nova_p_text_admin = st.text_input("Pergunta", value=str(row_p_admin["Pergunta"]), key=f"edit_p_txt_final_v2_{i_p_admin}")
                        with cols_p_admin[1]:
                            nova_cat_text_admin = st.text_input("Categoria", value=str(row_p_admin.get("Categoria", "Geral")), key=f"edit_p_cat_final_v2_{i_p_admin}")
                        with cols_p_admin[2]:
                            st.write("") 
                            if st.button("üíæ", key=f"salvar_p_adm_final_v2_{i_p_admin}", help="Salvar"):
                                perguntas_df_admin_edit.loc[i_p_admin, "Pergunta"] = nova_p_text_admin 
                                perguntas_df_admin_edit.loc[i_p_admin, "Categoria"] = nova_cat_text_admin
                                perguntas_df_admin_edit.to_csv(perguntas_csv, index=False, encoding='utf-8')
                                st.success(f"Pergunta {i_p_admin+1} atualizada."); st.rerun()
                        with cols_p_admin[3]:
                            st.write("") 
                            if st.button("üóëÔ∏è", key=f"deletar_p_adm_final_v2_{i_p_admin}", help="Deletar"):
                                perguntas_df_admin_edit = perguntas_df_admin_edit.drop(i_p_admin).reset_index(drop=True)
                                perguntas_df_admin_edit.to_csv(perguntas_csv, index=False, encoding='utf-8')
                                st.warning(f"Pergunta {i_p_admin+1} removida."); st.rerun()
                        st.divider()
            with tabs_perg_admin[1]: 
                with st.form("form_nova_pergunta_admin_final_v2"):
                    st.subheader("‚ûï Adicionar Nova Pergunta")
                    nova_p_form_txt_admin = st.text_input("Texto da Pergunta", key="nova_p_input_admin_txt_final_v2")
                    try:
                        perg_exist_df = pd.read_csv(perguntas_csv, encoding='utf-8')
                        cat_existentes = sorted(list(perg_exist_df['Categoria'].astype(str).unique())) if not perg_exist_df.empty and "Categoria" in perg_exist_df else []
                    except: cat_existentes = []
                    
                    cat_options = ["Nova Categoria"] + cat_existentes
                    cat_selecionada = st.selectbox("Categoria:", cat_options, key="cat_select_admin_new_q_final_v2")
                    
                    if cat_selecionada == "Nova Categoria":
                        nova_cat_form_admin = st.text_input("Nome da Nova Categoria:", key="nova_cat_input_admin_new_q_final_v2")
                    else: nova_cat_form_admin = cat_selecionada

                    tipo_p_form_admin = st.selectbox("Tipo de Pergunta", 
                                                 ["Pontua√ß√£o (0-10)", "Texto Aberto", "Escala (Muito Baixo, Baixo, M√©dio, Alto, Muito Alto)", "[Matriz GUT]"], 
                                                 key="tipo_p_select_admin_new_q_final_v2")
                    add_p_btn_admin = st.form_submit_button("Adicionar Pergunta")
                    if add_p_btn_admin:
                        if nova_p_form_txt_admin.strip() and nova_cat_form_admin.strip():
                            try: df_perg_add_admin = pd.read_csv(perguntas_csv, encoding='utf-8')
                            except (FileNotFoundError, pd.errors.EmptyDataError): df_perg_add_admin = pd.DataFrame(columns=colunas_base_perguntas)
                            if "Categoria" not in df_perg_add_admin.columns: df_perg_add_admin["Categoria"] = "Geral"
                            
                            p_completa_add_admin = f"{nova_p_form_txt_admin.strip()} {tipo_p_form_admin if tipo_p_form_admin == '[Matriz GUT]' else f'[{tipo_p_form_admin}]'}"
                            
                            nova_entrada_p_add_admin = pd.DataFrame([[p_completa_add_admin, nova_cat_form_admin.strip()]], columns=["Pergunta", "Categoria"])
                            df_perg_add_admin = pd.concat([df_perg_add_admin, nova_entrada_p_add_admin], ignore_index=True)
                            df_perg_add_admin.to_csv(perguntas_csv, index=False, encoding='utf-8')
                            st.success(f"Pergunta adicionada!"); st.rerun() 
                        else: st.warning("Texto da pergunta e categoria s√£o obrigat√≥rios.")

        elif menu_admin == "Gerenciar Clientes":
            st.subheader("üë• Gerenciar Clientes")
            try:
                usuarios_clientes_df = pd.read_csv(usuarios_csv, encoding='utf-8')
                for col_usr_check in colunas_base_usuarios: 
                    if col_usr_check not in usuarios_clientes_df.columns: usuarios_clientes_df[col_usr_check] = ""
            except (FileNotFoundError, pd.errors.EmptyDataError): 
                usuarios_clientes_df = pd.DataFrame(columns=colunas_base_usuarios)
            
            st.caption(f"Total de clientes: {len(usuarios_clientes_df)}")
            
            if not usuarios_clientes_df.empty:
                st.markdown("#### Editar Clientes Existentes")
                for idx_gc, row_gc in usuarios_clientes_df.iterrows():
                    with st.expander(f"{row_gc.get('Empresa','N/A')} (CNPJ: {row_gc['CNPJ']})"):
                        cols_edit_cli = st.columns(2) 
                        with cols_edit_cli[0]:
                            st.text_input("CNPJ (n√£o edit√°vel)", value=row_gc['CNPJ'], disabled=True, key=f"cnpj_gc_final_v2_{idx_gc}")
                            nova_senha_gc = st.text_input("Nova Senha (deixe em branco para n√£o alterar)", type="password", key=f"senha_gc_final_v2_{idx_gc}")
                            nome_empresa_gc = st.text_input("Nome Empresa", value=row_gc.get('Empresa',""), key=f"empresa_gc_final_v2_{idx_gc}")
                        with cols_edit_cli[1]:
                            nome_contato_gc = st.text_input("Nome Contato", value=row_gc.get("NomeContato", ""), key=f"nomec_gc_final_v2_{idx_gc}")
                            telefone_gc = st.text_input("Telefone", value=row_gc.get("Telefone", ""), key=f"tel_gc_final_v2_{idx_gc}")
                            logo_atual_path = find_client_logo_path(row_gc['CNPJ'])
                            if logo_atual_path: st.image(logo_atual_path, width=100, caption="Logo Atual")
                            uploaded_logo_gc = st.file_uploader("Alterar/Adicionar Logo", type=["png", "jpg", "jpeg"], key=f"logo_gc_final_v2_{idx_gc}")

                        if st.button("üíæ Salvar Altera√ß√µes do Cliente", key=f"save_gc_final_v2_{idx_gc}"):
                            if nova_senha_gc: usuarios_clientes_df.loc[idx_gc, "Senha"] = nova_senha_gc
                            usuarios_clientes_df.loc[idx_gc, "Empresa"] = nome_empresa_gc
                            usuarios_clientes_df.loc[idx_gc, "NomeContato"] = nome_contato_gc
                            usuarios_clientes_df.loc[idx_gc, "Telefone"] = telefone_gc
                            if uploaded_logo_gc is not None:
                                if not os.path.exists(LOGOS_DIR): os.makedirs(LOGOS_DIR)
                                for ext_old in ["png", "jpg", "jpeg"]: # Remover logo antiga se existir
                                    old_path = os.path.join(LOGOS_DIR, f"{str(row_gc['CNPJ'])}_logo.{ext_old}")
                                    if os.path.exists(old_path): os.remove(old_path)
                                file_extension = uploaded_logo_gc.name.split('.')[-1].lower()
                                logo_save_path_gc = os.path.join(LOGOS_DIR, f"{str(row_gc['CNPJ'])}_logo.{file_extension}")
                                with open(logo_save_path_gc, "wb") as f: f.write(uploaded_logo_gc.getbuffer())
                                st.success(f"Logo de {row_gc['Empresa']} atualizada!")
                            
                            usuarios_clientes_df.to_csv(usuarios_csv, index=False, encoding='utf-8')
                            st.success(f"Dados de {row_gc['Empresa']} atualizados!"); st.rerun()
                st.divider()

            st.subheader("‚ûï Adicionar Novo Cliente")
            with st.form("form_novo_cliente_admin_final_v2"):
                cols_add_cli_1 = st.columns(2)
                with cols_add_cli_1[0]:
                    novo_cnpj_gc_form = st.text_input("CNPJ do cliente *")
                    nova_senha_gc_form = st.text_input("Senha para o cliente *", type="password")
                    nova_empresa_gc_form = st.text_input("Nome da empresa cliente *")
                with cols_add_cli_1[1]:
                    novo_nomecontato_gc_form = st.text_input("Nome do Contato")
                    novo_telefone_gc_form = st.text_input("Telefone")
                    nova_logo_gc_form = st.file_uploader("Logo da Empresa", type=["png", "jpg", "jpeg"])
                
                adicionar_cliente_btn_gc = st.form_submit_button("Adicionar Cliente")

            if adicionar_cliente_btn_gc:
                if novo_cnpj_gc_form and nova_senha_gc_form and nova_empresa_gc_form:
                    if novo_cnpj_gc_form in usuarios_clientes_df["CNPJ"].astype(str).values:
                         st.error(f"CNPJ {novo_cnpj_gc_form} j√° cadastrado.")
                    else:
                        novo_usuario_data_gc = pd.DataFrame([[
                            novo_cnpj_gc_form, nova_senha_gc_form, nova_empresa_gc_form, 
                            novo_nomecontato_gc_form, novo_telefone_gc_form
                            ]], columns=colunas_base_usuarios)
                        usuarios_clientes_df = pd.concat([usuarios_clientes_df, novo_usuario_data_gc], ignore_index=True)
                        usuarios_clientes_df.to_csv(usuarios_csv, index=False, encoding='utf-8')
                        
                        if nova_logo_gc_form is not None:
                            if not os.path.exists(LOGOS_DIR): os.makedirs(LOGOS_DIR)
                            file_extension_new = nova_logo_gc_form.name.split('.')[-1].lower()
                            logo_save_path_new_gc = os.path.join(LOGOS_DIR, f"{str(novo_cnpj_gc_form)}_logo.{file_extension_new}")
                            with open(logo_save_path_new_gc, "wb") as f: f.write(nova_logo_gc_form.getbuffer())
                        
                        st.success(f"Cliente '{nova_empresa_gc_form}' adicionado!"); st.rerun()
                else: st.warning("CNPJ, Senha e Nome da Empresa s√£o obrigat√≥rios.")
            
            st.markdown("---"); st.subheader("üö´ Gerenciar Bloqueios")
            try: bloqueados_df_adm = pd.read_csv(usuarios_bloqueados_csv, encoding='utf-8')
            except (FileNotFoundError, pd.errors.EmptyDataError): bloqueados_df_adm = pd.DataFrame(columns=["CNPJ"])
            st.write("CNPJs bloqueados:", bloqueados_df_adm["CNPJ"].tolist() if not bloqueados_df_adm.empty else "Nenhum")
            col_block, col_unblock = st.columns(2)
            with col_block:
                cnpj_para_bloquear = st.selectbox("Bloquear CNPJ:", [""] + usuarios_clientes_df["CNPJ"].astype(str).unique().tolist(), key="block_cnpj_final_v2")
                if st.button("Bloquear Selecionado", key="btn_block_final_v2") and cnpj_para_bloquear:
                    if cnpj_para_bloquear not in bloqueados_df_adm["CNPJ"].astype(str).values:
                        nova_block = pd.DataFrame([[cnpj_para_bloquear]], columns=["CNPJ"])
                        bloqueados_df_adm = pd.concat([bloqueados_df_adm, nova_block], ignore_index=True)
                        bloqueados_df_adm.to_csv(usuarios_bloqueados_csv, index=False, encoding='utf-8')
                        st.success(f"CNPJ {cnpj_para_bloquear} bloqueado."); st.rerun()
                    else: st.warning(f"CNPJ {cnpj_para_bloquear} j√° bloqueado.")
            with col_unblock:
                cnpj_para_desbloquear = st.selectbox("Desbloquear CNPJ:", [""] + bloqueados_df_adm["CNPJ"].astype(str).unique().tolist(), key="unblock_cnpj_final_v2")
                if st.button("Desbloquear Selecionado", key="btn_unblock_final_v2") and cnpj_para_desbloquear:
                    bloqueados_df_adm = bloqueados_df_adm[bloqueados_df_adm["CNPJ"].astype(str) != cnpj_para_desbloquear]
                    bloqueados_df_adm.to_csv(usuarios_bloqueados_csv, index=False, encoding='utf-8')
                    st.success(f"CNPJ {cnpj_para_desbloquear} desbloqueado."); st.rerun()
            
        elif menu_admin == "Gerenciar Administradores":
            st.subheader("üëÆ Gerenciar Administradores")
            try:
                admins_df_manage = pd.read_csv(admin_credenciais_csv, encoding='utf-8')
            except (FileNotFoundError, pd.errors.EmptyDataError): 
                admins_df_manage = pd.DataFrame(columns=["Usuario", "Senha"])
            
            st.dataframe(admins_df_manage[["Usuario"]]) 
            st.markdown("---"); st.subheader("‚ûï Adicionar Novo Admin")
            with st.form("form_novo_admin_manage_final_v2"):
                novo_admin_user_manage = st.text_input("Usu√°rio do Admin")
                novo_admin_pass_manage = st.text_input("Senha do Admin", type="password")
                adicionar_admin_btn_manage = st.form_submit_button("Adicionar Admin")
            if adicionar_admin_btn_manage:
                if novo_admin_user_manage and novo_admin_pass_manage:
                    if novo_admin_user_manage in admins_df_manage["Usuario"].values:
                        st.error(f"Usu√°rio '{novo_admin_user_manage}' j√° existe.")
                    else:
                        novo_admin_data_manage = pd.DataFrame([[novo_admin_user_manage, novo_admin_pass_manage]], columns=["Usuario", "Senha"])
                        admins_df_manage = pd.concat([admins_df_manage, novo_admin_data_manage], ignore_index=True)
                        admins_df_manage.to_csv(admin_credenciais_csv, index=False, encoding='utf-8')
                        st.success(f"Admin '{novo_admin_user_manage}' adicionado!"); st.rerun()
                else: st.warning("Preencha todos os campos.")
            st.markdown("---"); st.subheader("üóëÔ∏è Remover Admin")
            if not admins_df_manage.empty:
                admin_para_remover_manage = st.selectbox("Remover Admin:", options=[""] + admins_df_manage["Usuario"].tolist(), key="remove_admin_select_manage_final_v2")
                if st.button("Remover Admin Selecionado", type="primary", key="btn_remove_admin_final_v2") and admin_para_remover_manage:
                    if len(admins_df_manage) == 1 and admin_para_remover_manage == admins_df_manage["Usuario"].iloc[0]:
                        st.error("N√£o √© poss√≠vel remover o √∫nico administrador.")
                    else:
                        admins_df_manage = admins_df_manage[admins_df_manage["Usuario"] != admin_para_remover_manage]
                        admins_df_manage.to_csv(admin_credenciais_csv, index=False, encoding='utf-8')
                        st.warning(f"Admin '{admin_para_remover_manage}' removido."); st.rerun()
            else: st.info("Nenhum administrador para remover.")

    except Exception as e_admin_area_final_full_v2:
        st.error(f"Ocorreu um erro cr√≠tico na √°rea administrativa: {e_admin_area_final_full_v2}")
        st.exception(e_admin_area_final_full_v2)

if not st.session_state.admin_logado and not st.session_state.cliente_logado and aba not in ["Administrador", "Cliente"]:
    st.info("Selecione se voc√™ √© Administrador ou Cliente para continuar.")
    st.stop()